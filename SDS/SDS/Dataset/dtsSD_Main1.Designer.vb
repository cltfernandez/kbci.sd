'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5477
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dtsSD_Main"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtsSD_Main
    Inherits Global.System.Data.DataSet
    
    Private tableMem_Ledger As Mem_LedgerDataTable
    
    Private tableMem_Payroll As Mem_PayrollDataTable
    
    Private tableMem_Loanhold As Mem_LoanholdDataTable
    
    Private tableTeller__Tran As Teller__TranDataTable
    
    Private tableTeller_Blotter As Teller_BlotterDataTable
    
    Private tableEOM_NAccts As EOM_NAcctsDataTable
    
    Private tableEOM_BMin As EOM_BMinDataTable
    
    Private tableEOM_AccInt As EOM_AccIntDataTable
    
    Private tableEOM_DAccts As EOM_DAcctsDataTable
    
    Private tableEOM_BRunup As EOM_BRunupDataTable
    
    Private tableEOQ_IntPaid As EOQ_IntPaidDataTable
    
    Private tableEOD_BTotals As EOD_BTotalsDataTable
    
    Private tableEOD_CDepo As EOD_CDepoDataTable
    
    Private tableEOD_RItems As EOD_RItemsDataTable
    
    Private tableEOD_ECorrect As EOD_ECorrectDataTable
    
    Private tableEOD_DCTotals As EOD_DCTotalsDataTable
    
    Private tableEOD_TListing As EOD_TListingDataTable
    
    Private tableEOD_Register As EOD_RegisterDataTable
    
    Private tableMaster_Prooflist As Master_ProoflistDataTable
    
    Private tableActivity_Log As Activity_LogDataTable
    
    Private tableMem_APayment As Mem_APaymentDataTable
    
    Private tableEOM_Dormancy As EOM_DormancyDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Mem_Ledger")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_LedgerDataTable(ds.Tables("Mem_Ledger")))
            End If
            If (Not (ds.Tables("Mem_Payroll")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_PayrollDataTable(ds.Tables("Mem_Payroll")))
            End If
            If (Not (ds.Tables("Mem_Loanhold")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_LoanholdDataTable(ds.Tables("Mem_Loanhold")))
            End If
            If (Not (ds.Tables("Teller _Tran")) Is Nothing) Then
                MyBase.Tables.Add(New Teller__TranDataTable(ds.Tables("Teller _Tran")))
            End If
            If (Not (ds.Tables("Teller_Blotter")) Is Nothing) Then
                MyBase.Tables.Add(New Teller_BlotterDataTable(ds.Tables("Teller_Blotter")))
            End If
            If (Not (ds.Tables("EOM_NAccts")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_NAcctsDataTable(ds.Tables("EOM_NAccts")))
            End If
            If (Not (ds.Tables("EOM_BMin")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_BMinDataTable(ds.Tables("EOM_BMin")))
            End If
            If (Not (ds.Tables("EOM_AccInt")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_AccIntDataTable(ds.Tables("EOM_AccInt")))
            End If
            If (Not (ds.Tables("EOM_DAccts")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_DAcctsDataTable(ds.Tables("EOM_DAccts")))
            End If
            If (Not (ds.Tables("EOM_BRunup")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_BRunupDataTable(ds.Tables("EOM_BRunup")))
            End If
            If (Not (ds.Tables("EOQ_IntPaid")) Is Nothing) Then
                MyBase.Tables.Add(New EOQ_IntPaidDataTable(ds.Tables("EOQ_IntPaid")))
            End If
            If (Not (ds.Tables("EOD_BTotals")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_BTotalsDataTable(ds.Tables("EOD_BTotals")))
            End If
            If (Not (ds.Tables("EOD_CDepo")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_CDepoDataTable(ds.Tables("EOD_CDepo")))
            End If
            If (Not (ds.Tables("EOD_RItems")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_RItemsDataTable(ds.Tables("EOD_RItems")))
            End If
            If (Not (ds.Tables("EOD_ECorrect")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_ECorrectDataTable(ds.Tables("EOD_ECorrect")))
            End If
            If (Not (ds.Tables("EOD_DCTotals")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_DCTotalsDataTable(ds.Tables("EOD_DCTotals")))
            End If
            If (Not (ds.Tables("EOD_TListing")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_TListingDataTable(ds.Tables("EOD_TListing")))
            End If
            If (Not (ds.Tables("EOD_Register")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_RegisterDataTable(ds.Tables("EOD_Register")))
            End If
            If (Not (ds.Tables("Master_Prooflist")) Is Nothing) Then
                MyBase.Tables.Add(New Master_ProoflistDataTable(ds.Tables("Master_Prooflist")))
            End If
            If (Not (ds.Tables("Activity_Log")) Is Nothing) Then
                MyBase.Tables.Add(New Activity_LogDataTable(ds.Tables("Activity_Log")))
            End If
            If (Not (ds.Tables("Mem_APayment")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_APaymentDataTable(ds.Tables("Mem_APayment")))
            End If
            If (Not (ds.Tables("EOM_Dormancy")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_DormancyDataTable(ds.Tables("EOM_Dormancy")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Mem_Ledger() As Mem_LedgerDataTable
        Get
            Return Me.tableMem_Ledger
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Mem_Payroll() As Mem_PayrollDataTable
        Get
            Return Me.tableMem_Payroll
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Mem_Loanhold() As Mem_LoanholdDataTable
        Get
            Return Me.tableMem_Loanhold
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Teller__Tran() As Teller__TranDataTable
        Get
            Return Me.tableTeller__Tran
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Teller_Blotter() As Teller_BlotterDataTable
        Get
            Return Me.tableTeller_Blotter
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOM_NAccts() As EOM_NAcctsDataTable
        Get
            Return Me.tableEOM_NAccts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOM_BMin() As EOM_BMinDataTable
        Get
            Return Me.tableEOM_BMin
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOM_AccInt() As EOM_AccIntDataTable
        Get
            Return Me.tableEOM_AccInt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOM_DAccts() As EOM_DAcctsDataTable
        Get
            Return Me.tableEOM_DAccts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOM_BRunup() As EOM_BRunupDataTable
        Get
            Return Me.tableEOM_BRunup
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOQ_IntPaid() As EOQ_IntPaidDataTable
        Get
            Return Me.tableEOQ_IntPaid
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOD_BTotals() As EOD_BTotalsDataTable
        Get
            Return Me.tableEOD_BTotals
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOD_CDepo() As EOD_CDepoDataTable
        Get
            Return Me.tableEOD_CDepo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOD_RItems() As EOD_RItemsDataTable
        Get
            Return Me.tableEOD_RItems
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOD_ECorrect() As EOD_ECorrectDataTable
        Get
            Return Me.tableEOD_ECorrect
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOD_DCTotals() As EOD_DCTotalsDataTable
        Get
            Return Me.tableEOD_DCTotals
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOD_TListing() As EOD_TListingDataTable
        Get
            Return Me.tableEOD_TListing
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOD_Register() As EOD_RegisterDataTable
        Get
            Return Me.tableEOD_Register
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Master_Prooflist() As Master_ProoflistDataTable
        Get
            Return Me.tableMaster_Prooflist
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Activity_Log() As Activity_LogDataTable
        Get
            Return Me.tableActivity_Log
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Mem_APayment() As Mem_APaymentDataTable
        Get
            Return Me.tableMem_APayment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EOM_Dormancy() As EOM_DormancyDataTable
        Get
            Return Me.tableEOM_Dormancy
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dtsSD_Main = CType(MyBase.Clone,dtsSD_Main)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Mem_Ledger")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_LedgerDataTable(ds.Tables("Mem_Ledger")))
            End If
            If (Not (ds.Tables("Mem_Payroll")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_PayrollDataTable(ds.Tables("Mem_Payroll")))
            End If
            If (Not (ds.Tables("Mem_Loanhold")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_LoanholdDataTable(ds.Tables("Mem_Loanhold")))
            End If
            If (Not (ds.Tables("Teller _Tran")) Is Nothing) Then
                MyBase.Tables.Add(New Teller__TranDataTable(ds.Tables("Teller _Tran")))
            End If
            If (Not (ds.Tables("Teller_Blotter")) Is Nothing) Then
                MyBase.Tables.Add(New Teller_BlotterDataTable(ds.Tables("Teller_Blotter")))
            End If
            If (Not (ds.Tables("EOM_NAccts")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_NAcctsDataTable(ds.Tables("EOM_NAccts")))
            End If
            If (Not (ds.Tables("EOM_BMin")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_BMinDataTable(ds.Tables("EOM_BMin")))
            End If
            If (Not (ds.Tables("EOM_AccInt")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_AccIntDataTable(ds.Tables("EOM_AccInt")))
            End If
            If (Not (ds.Tables("EOM_DAccts")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_DAcctsDataTable(ds.Tables("EOM_DAccts")))
            End If
            If (Not (ds.Tables("EOM_BRunup")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_BRunupDataTable(ds.Tables("EOM_BRunup")))
            End If
            If (Not (ds.Tables("EOQ_IntPaid")) Is Nothing) Then
                MyBase.Tables.Add(New EOQ_IntPaidDataTable(ds.Tables("EOQ_IntPaid")))
            End If
            If (Not (ds.Tables("EOD_BTotals")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_BTotalsDataTable(ds.Tables("EOD_BTotals")))
            End If
            If (Not (ds.Tables("EOD_CDepo")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_CDepoDataTable(ds.Tables("EOD_CDepo")))
            End If
            If (Not (ds.Tables("EOD_RItems")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_RItemsDataTable(ds.Tables("EOD_RItems")))
            End If
            If (Not (ds.Tables("EOD_ECorrect")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_ECorrectDataTable(ds.Tables("EOD_ECorrect")))
            End If
            If (Not (ds.Tables("EOD_DCTotals")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_DCTotalsDataTable(ds.Tables("EOD_DCTotals")))
            End If
            If (Not (ds.Tables("EOD_TListing")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_TListingDataTable(ds.Tables("EOD_TListing")))
            End If
            If (Not (ds.Tables("EOD_Register")) Is Nothing) Then
                MyBase.Tables.Add(New EOD_RegisterDataTable(ds.Tables("EOD_Register")))
            End If
            If (Not (ds.Tables("Master_Prooflist")) Is Nothing) Then
                MyBase.Tables.Add(New Master_ProoflistDataTable(ds.Tables("Master_Prooflist")))
            End If
            If (Not (ds.Tables("Activity_Log")) Is Nothing) Then
                MyBase.Tables.Add(New Activity_LogDataTable(ds.Tables("Activity_Log")))
            End If
            If (Not (ds.Tables("Mem_APayment")) Is Nothing) Then
                MyBase.Tables.Add(New Mem_APaymentDataTable(ds.Tables("Mem_APayment")))
            End If
            If (Not (ds.Tables("EOM_Dormancy")) Is Nothing) Then
                MyBase.Tables.Add(New EOM_DormancyDataTable(ds.Tables("EOM_Dormancy")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMem_Ledger = CType(MyBase.Tables("Mem_Ledger"),Mem_LedgerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMem_Ledger) Is Nothing) Then
                Me.tableMem_Ledger.InitVars
            End If
        End If
        Me.tableMem_Payroll = CType(MyBase.Tables("Mem_Payroll"),Mem_PayrollDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMem_Payroll) Is Nothing) Then
                Me.tableMem_Payroll.InitVars
            End If
        End If
        Me.tableMem_Loanhold = CType(MyBase.Tables("Mem_Loanhold"),Mem_LoanholdDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMem_Loanhold) Is Nothing) Then
                Me.tableMem_Loanhold.InitVars
            End If
        End If
        Me.tableTeller__Tran = CType(MyBase.Tables("Teller _Tran"),Teller__TranDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTeller__Tran) Is Nothing) Then
                Me.tableTeller__Tran.InitVars
            End If
        End If
        Me.tableTeller_Blotter = CType(MyBase.Tables("Teller_Blotter"),Teller_BlotterDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTeller_Blotter) Is Nothing) Then
                Me.tableTeller_Blotter.InitVars
            End If
        End If
        Me.tableEOM_NAccts = CType(MyBase.Tables("EOM_NAccts"),EOM_NAcctsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOM_NAccts) Is Nothing) Then
                Me.tableEOM_NAccts.InitVars
            End If
        End If
        Me.tableEOM_BMin = CType(MyBase.Tables("EOM_BMin"),EOM_BMinDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOM_BMin) Is Nothing) Then
                Me.tableEOM_BMin.InitVars
            End If
        End If
        Me.tableEOM_AccInt = CType(MyBase.Tables("EOM_AccInt"),EOM_AccIntDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOM_AccInt) Is Nothing) Then
                Me.tableEOM_AccInt.InitVars
            End If
        End If
        Me.tableEOM_DAccts = CType(MyBase.Tables("EOM_DAccts"),EOM_DAcctsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOM_DAccts) Is Nothing) Then
                Me.tableEOM_DAccts.InitVars
            End If
        End If
        Me.tableEOM_BRunup = CType(MyBase.Tables("EOM_BRunup"),EOM_BRunupDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOM_BRunup) Is Nothing) Then
                Me.tableEOM_BRunup.InitVars
            End If
        End If
        Me.tableEOQ_IntPaid = CType(MyBase.Tables("EOQ_IntPaid"),EOQ_IntPaidDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOQ_IntPaid) Is Nothing) Then
                Me.tableEOQ_IntPaid.InitVars
            End If
        End If
        Me.tableEOD_BTotals = CType(MyBase.Tables("EOD_BTotals"),EOD_BTotalsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOD_BTotals) Is Nothing) Then
                Me.tableEOD_BTotals.InitVars
            End If
        End If
        Me.tableEOD_CDepo = CType(MyBase.Tables("EOD_CDepo"),EOD_CDepoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOD_CDepo) Is Nothing) Then
                Me.tableEOD_CDepo.InitVars
            End If
        End If
        Me.tableEOD_RItems = CType(MyBase.Tables("EOD_RItems"),EOD_RItemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOD_RItems) Is Nothing) Then
                Me.tableEOD_RItems.InitVars
            End If
        End If
        Me.tableEOD_ECorrect = CType(MyBase.Tables("EOD_ECorrect"),EOD_ECorrectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOD_ECorrect) Is Nothing) Then
                Me.tableEOD_ECorrect.InitVars
            End If
        End If
        Me.tableEOD_DCTotals = CType(MyBase.Tables("EOD_DCTotals"),EOD_DCTotalsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOD_DCTotals) Is Nothing) Then
                Me.tableEOD_DCTotals.InitVars
            End If
        End If
        Me.tableEOD_TListing = CType(MyBase.Tables("EOD_TListing"),EOD_TListingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOD_TListing) Is Nothing) Then
                Me.tableEOD_TListing.InitVars
            End If
        End If
        Me.tableEOD_Register = CType(MyBase.Tables("EOD_Register"),EOD_RegisterDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOD_Register) Is Nothing) Then
                Me.tableEOD_Register.InitVars
            End If
        End If
        Me.tableMaster_Prooflist = CType(MyBase.Tables("Master_Prooflist"),Master_ProoflistDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMaster_Prooflist) Is Nothing) Then
                Me.tableMaster_Prooflist.InitVars
            End If
        End If
        Me.tableActivity_Log = CType(MyBase.Tables("Activity_Log"),Activity_LogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableActivity_Log) Is Nothing) Then
                Me.tableActivity_Log.InitVars
            End If
        End If
        Me.tableMem_APayment = CType(MyBase.Tables("Mem_APayment"),Mem_APaymentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMem_APayment) Is Nothing) Then
                Me.tableMem_APayment.InitVars
            End If
        End If
        Me.tableEOM_Dormancy = CType(MyBase.Tables("EOM_Dormancy"),EOM_DormancyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEOM_Dormancy) Is Nothing) Then
                Me.tableEOM_Dormancy.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtsSD_Main"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtsSD_Main.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMem_Ledger = New Mem_LedgerDataTable
        MyBase.Tables.Add(Me.tableMem_Ledger)
        Me.tableMem_Payroll = New Mem_PayrollDataTable
        MyBase.Tables.Add(Me.tableMem_Payroll)
        Me.tableMem_Loanhold = New Mem_LoanholdDataTable
        MyBase.Tables.Add(Me.tableMem_Loanhold)
        Me.tableTeller__Tran = New Teller__TranDataTable
        MyBase.Tables.Add(Me.tableTeller__Tran)
        Me.tableTeller_Blotter = New Teller_BlotterDataTable
        MyBase.Tables.Add(Me.tableTeller_Blotter)
        Me.tableEOM_NAccts = New EOM_NAcctsDataTable
        MyBase.Tables.Add(Me.tableEOM_NAccts)
        Me.tableEOM_BMin = New EOM_BMinDataTable
        MyBase.Tables.Add(Me.tableEOM_BMin)
        Me.tableEOM_AccInt = New EOM_AccIntDataTable
        MyBase.Tables.Add(Me.tableEOM_AccInt)
        Me.tableEOM_DAccts = New EOM_DAcctsDataTable
        MyBase.Tables.Add(Me.tableEOM_DAccts)
        Me.tableEOM_BRunup = New EOM_BRunupDataTable
        MyBase.Tables.Add(Me.tableEOM_BRunup)
        Me.tableEOQ_IntPaid = New EOQ_IntPaidDataTable
        MyBase.Tables.Add(Me.tableEOQ_IntPaid)
        Me.tableEOD_BTotals = New EOD_BTotalsDataTable
        MyBase.Tables.Add(Me.tableEOD_BTotals)
        Me.tableEOD_CDepo = New EOD_CDepoDataTable
        MyBase.Tables.Add(Me.tableEOD_CDepo)
        Me.tableEOD_RItems = New EOD_RItemsDataTable
        MyBase.Tables.Add(Me.tableEOD_RItems)
        Me.tableEOD_ECorrect = New EOD_ECorrectDataTable
        MyBase.Tables.Add(Me.tableEOD_ECorrect)
        Me.tableEOD_DCTotals = New EOD_DCTotalsDataTable
        MyBase.Tables.Add(Me.tableEOD_DCTotals)
        Me.tableEOD_TListing = New EOD_TListingDataTable
        MyBase.Tables.Add(Me.tableEOD_TListing)
        Me.tableEOD_Register = New EOD_RegisterDataTable
        MyBase.Tables.Add(Me.tableEOD_Register)
        Me.tableMaster_Prooflist = New Master_ProoflistDataTable
        MyBase.Tables.Add(Me.tableMaster_Prooflist)
        Me.tableActivity_Log = New Activity_LogDataTable
        MyBase.Tables.Add(Me.tableActivity_Log)
        Me.tableMem_APayment = New Mem_APaymentDataTable
        MyBase.Tables.Add(Me.tableMem_APayment)
        Me.tableEOM_Dormancy = New EOM_DormancyDataTable
        MyBase.Tables.Add(Me.tableEOM_Dormancy)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMem_Ledger() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMem_Payroll() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMem_Loanhold() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTeller__Tran() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTeller_Blotter() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOM_NAccts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOM_BMin() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOM_AccInt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOM_DAccts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOM_BRunup() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOQ_IntPaid() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOD_BTotals() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOD_CDepo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOD_RItems() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOD_ECorrect() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOD_DCTotals() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOD_TListing() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOD_Register() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMaster_Prooflist() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeActivity_Log() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMem_APayment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEOM_Dormancy() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtsSD_Main = New dtsSD_Main
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Mem_LedgerRowChangeEventHandler(ByVal sender As Object, ByVal e As Mem_LedgerRowChangeEvent)
    
    Public Delegate Sub Mem_PayrollRowChangeEventHandler(ByVal sender As Object, ByVal e As Mem_PayrollRowChangeEvent)
    
    Public Delegate Sub Mem_LoanholdRowChangeEventHandler(ByVal sender As Object, ByVal e As Mem_LoanholdRowChangeEvent)
    
    Public Delegate Sub Teller__TranRowChangeEventHandler(ByVal sender As Object, ByVal e As Teller__TranRowChangeEvent)
    
    Public Delegate Sub Teller_BlotterRowChangeEventHandler(ByVal sender As Object, ByVal e As Teller_BlotterRowChangeEvent)
    
    Public Delegate Sub EOM_NAcctsRowChangeEventHandler(ByVal sender As Object, ByVal e As EOM_NAcctsRowChangeEvent)
    
    Public Delegate Sub EOM_BMinRowChangeEventHandler(ByVal sender As Object, ByVal e As EOM_BMinRowChangeEvent)
    
    Public Delegate Sub EOM_AccIntRowChangeEventHandler(ByVal sender As Object, ByVal e As EOM_AccIntRowChangeEvent)
    
    Public Delegate Sub EOM_DAcctsRowChangeEventHandler(ByVal sender As Object, ByVal e As EOM_DAcctsRowChangeEvent)
    
    Public Delegate Sub EOM_BRunupRowChangeEventHandler(ByVal sender As Object, ByVal e As EOM_BRunupRowChangeEvent)
    
    Public Delegate Sub EOQ_IntPaidRowChangeEventHandler(ByVal sender As Object, ByVal e As EOQ_IntPaidRowChangeEvent)
    
    Public Delegate Sub EOD_BTotalsRowChangeEventHandler(ByVal sender As Object, ByVal e As EOD_BTotalsRowChangeEvent)
    
    Public Delegate Sub EOD_CDepoRowChangeEventHandler(ByVal sender As Object, ByVal e As EOD_CDepoRowChangeEvent)
    
    Public Delegate Sub EOD_RItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As EOD_RItemsRowChangeEvent)
    
    Public Delegate Sub EOD_ECorrectRowChangeEventHandler(ByVal sender As Object, ByVal e As EOD_ECorrectRowChangeEvent)
    
    Public Delegate Sub EOD_DCTotalsRowChangeEventHandler(ByVal sender As Object, ByVal e As EOD_DCTotalsRowChangeEvent)
    
    Public Delegate Sub EOD_TListingRowChangeEventHandler(ByVal sender As Object, ByVal e As EOD_TListingRowChangeEvent)
    
    Public Delegate Sub EOD_RegisterRowChangeEventHandler(ByVal sender As Object, ByVal e As EOD_RegisterRowChangeEvent)
    
    Public Delegate Sub Master_ProoflistRowChangeEventHandler(ByVal sender As Object, ByVal e As Master_ProoflistRowChangeEvent)
    
    Public Delegate Sub Activity_LogRowChangeEventHandler(ByVal sender As Object, ByVal e As Activity_LogRowChangeEvent)
    
    Public Delegate Sub Mem_APaymentRowChangeEventHandler(ByVal sender As Object, ByVal e As Mem_APaymentRowChangeEvent)
    
    Public Delegate Sub EOM_DormancyRowChangeEventHandler(ByVal sender As Object, ByVal e As EOM_DormancyRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Mem_LedgerDataTable
        Inherits Global.System.Data.TypedTableBase(Of Mem_LedgerRow)
        
        Private columnTRAN_DATE As Global.System.Data.DataColumn
        
        Private columnTIME As Global.System.Data.DataColumn
        
        Private columnCOD As Global.System.Data.DataColumn
        
        Private columnBANK As Global.System.Data.DataColumn
        
        Private columnCHECK_NUM As Global.System.Data.DataColumn
        
        Private columnDEBIT As Global.System.Data.DataColumn
        
        Private columnCREDIT As Global.System.Data.DataColumn
        
        Private columnBALANCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Mem_Ledger"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRAN_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRAN_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BANKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBANK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHECK_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHECK_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEBITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEBIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREDITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREDIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Mem_LedgerRow
            Get
                Return CType(Me.Rows(index),Mem_LedgerRow)
            End Get
        End Property
        
        Public Event Mem_LedgerRowChanging As Mem_LedgerRowChangeEventHandler
        
        Public Event Mem_LedgerRowChanged As Mem_LedgerRowChangeEventHandler
        
        Public Event Mem_LedgerRowDeleting As Mem_LedgerRowChangeEventHandler
        
        Public Event Mem_LedgerRowDeleted As Mem_LedgerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMem_LedgerRow(ByVal row As Mem_LedgerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMem_LedgerRow(ByVal TRAN_DATE As String, ByVal TIME As String, ByVal COD As String, ByVal BANK As String, ByVal CHECK_NUM As String, ByVal DEBIT As Decimal, ByVal CREDIT As Decimal, ByVal BALANCE As Decimal) As Mem_LedgerRow
            Dim rowMem_LedgerRow As Mem_LedgerRow = CType(Me.NewRow,Mem_LedgerRow)
            Dim columnValuesArray() As Object = New Object() {TRAN_DATE, TIME, COD, BANK, CHECK_NUM, DEBIT, CREDIT, BALANCE}
            rowMem_LedgerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMem_LedgerRow)
            Return rowMem_LedgerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Mem_LedgerDataTable = CType(MyBase.Clone,Mem_LedgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Mem_LedgerDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTRAN_DATE = MyBase.Columns("TRAN_DATE")
            Me.columnTIME = MyBase.Columns("TIME")
            Me.columnCOD = MyBase.Columns("COD")
            Me.columnBANK = MyBase.Columns("BANK")
            Me.columnCHECK_NUM = MyBase.Columns("CHECK_NUM")
            Me.columnDEBIT = MyBase.Columns("DEBIT")
            Me.columnCREDIT = MyBase.Columns("CREDIT")
            Me.columnBALANCE = MyBase.Columns("BALANCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTRAN_DATE = New Global.System.Data.DataColumn("TRAN_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRAN_DATE)
            Me.columnTIME = New Global.System.Data.DataColumn("TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME)
            Me.columnCOD = New Global.System.Data.DataColumn("COD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD)
            Me.columnBANK = New Global.System.Data.DataColumn("BANK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBANK)
            Me.columnCHECK_NUM = New Global.System.Data.DataColumn("CHECK_NUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHECK_NUM)
            Me.columnDEBIT = New Global.System.Data.DataColumn("DEBIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEBIT)
            Me.columnCREDIT = New Global.System.Data.DataColumn("CREDIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREDIT)
            Me.columnBALANCE = New Global.System.Data.DataColumn("BALANCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBALANCE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMem_LedgerRow() As Mem_LedgerRow
            Return CType(Me.NewRow,Mem_LedgerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Mem_LedgerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Mem_LedgerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Mem_LedgerRowChangedEvent) Is Nothing) Then
                RaiseEvent Mem_LedgerRowChanged(Me, New Mem_LedgerRowChangeEvent(CType(e.Row,Mem_LedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Mem_LedgerRowChangingEvent) Is Nothing) Then
                RaiseEvent Mem_LedgerRowChanging(Me, New Mem_LedgerRowChangeEvent(CType(e.Row,Mem_LedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Mem_LedgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent Mem_LedgerRowDeleted(Me, New Mem_LedgerRowChangeEvent(CType(e.Row,Mem_LedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Mem_LedgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent Mem_LedgerRowDeleting(Me, New Mem_LedgerRowChangeEvent(CType(e.Row,Mem_LedgerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMem_LedgerRow(ByVal row As Mem_LedgerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Mem_LedgerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Mem_PayrollDataTable
        Inherits Global.System.Data.TypedTableBase(Of Mem_PayrollRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnSDBBAL As Global.System.Data.DataColumn
        
        Private columnPAMT As Global.System.Data.DataColumn
        
        Private columnSDEBAL As Global.System.Data.DataColumn
        
        Private columnSDSEQ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Mem_Payroll"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SDBBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDBBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SDEBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDEBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SDSEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSDSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Mem_PayrollRow
            Get
                Return CType(Me.Rows(index),Mem_PayrollRow)
            End Get
        End Property
        
        Public Event Mem_PayrollRowChanging As Mem_PayrollRowChangeEventHandler
        
        Public Event Mem_PayrollRowChanged As Mem_PayrollRowChangeEventHandler
        
        Public Event Mem_PayrollRowDeleting As Mem_PayrollRowChangeEventHandler
        
        Public Event Mem_PayrollRowDeleted As Mem_PayrollRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMem_PayrollRow(ByVal row As Mem_PayrollRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMem_PayrollRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal SDBBAL As Decimal, ByVal PAMT As Decimal, ByVal SDEBAL As Decimal, ByVal SDSEQ As String) As Mem_PayrollRow
            Dim rowMem_PayrollRow As Mem_PayrollRow = CType(Me.NewRow,Mem_PayrollRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, SDBBAL, PAMT, SDEBAL, SDSEQ}
            rowMem_PayrollRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMem_PayrollRow)
            Return rowMem_PayrollRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Mem_PayrollDataTable = CType(MyBase.Clone,Mem_PayrollDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Mem_PayrollDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnSDBBAL = MyBase.Columns("SDBBAL")
            Me.columnPAMT = MyBase.Columns("PAMT")
            Me.columnSDEBAL = MyBase.Columns("SDEBAL")
            Me.columnSDSEQ = MyBase.Columns("SDSEQ")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnSDBBAL = New Global.System.Data.DataColumn("SDBBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDBBAL)
            Me.columnPAMT = New Global.System.Data.DataColumn("PAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAMT)
            Me.columnSDEBAL = New Global.System.Data.DataColumn("SDEBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDEBAL)
            Me.columnSDSEQ = New Global.System.Data.DataColumn("SDSEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSDSEQ)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMem_PayrollRow() As Mem_PayrollRow
            Return CType(Me.NewRow,Mem_PayrollRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Mem_PayrollRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Mem_PayrollRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Mem_PayrollRowChangedEvent) Is Nothing) Then
                RaiseEvent Mem_PayrollRowChanged(Me, New Mem_PayrollRowChangeEvent(CType(e.Row,Mem_PayrollRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Mem_PayrollRowChangingEvent) Is Nothing) Then
                RaiseEvent Mem_PayrollRowChanging(Me, New Mem_PayrollRowChangeEvent(CType(e.Row,Mem_PayrollRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Mem_PayrollRowDeletedEvent) Is Nothing) Then
                RaiseEvent Mem_PayrollRowDeleted(Me, New Mem_PayrollRowChangeEvent(CType(e.Row,Mem_PayrollRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Mem_PayrollRowDeletingEvent) Is Nothing) Then
                RaiseEvent Mem_PayrollRowDeleting(Me, New Mem_PayrollRowChangeEvent(CType(e.Row,Mem_PayrollRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMem_PayrollRow(ByVal row As Mem_PayrollRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Mem_PayrollDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Mem_LoanholdDataTable
        Inherits Global.System.Data.TypedTableBase(Of Mem_LoanholdRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTNAME As Global.System.Data.DataColumn
        
        Private columnHOLDCD As Global.System.Data.DataColumn
        
        Private columnHOLDTYPE As Global.System.Data.DataColumn
        
        Private columnHOLDAMT As Global.System.Data.DataColumn
        
        Private columnHOLDDATE As Global.System.Data.DataColumn
        
        Private columnHOLDUSER As Global.System.Data.DataColumn
        
        Private columnHOLDRMKS As Global.System.Data.DataColumn
        
        Private columnPOSTSTAT As Global.System.Data.DataColumn
        
        Private columnPOSTDATE As Global.System.Data.DataColumn
        
        Private columnPOSTUSER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Mem_Loanhold"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOLDCDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOLDCD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOLDTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOLDTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOLDAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOLDAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOLDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOLDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOLDUSERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOLDUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HOLDRMKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHOLDRMKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSTSTATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTSTAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSTUSERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Mem_LoanholdRow
            Get
                Return CType(Me.Rows(index),Mem_LoanholdRow)
            End Get
        End Property
        
        Public Event Mem_LoanholdRowChanging As Mem_LoanholdRowChangeEventHandler
        
        Public Event Mem_LoanholdRowChanged As Mem_LoanholdRowChangeEventHandler
        
        Public Event Mem_LoanholdRowDeleting As Mem_LoanholdRowChangeEventHandler
        
        Public Event Mem_LoanholdRowDeleted As Mem_LoanholdRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMem_LoanholdRow(ByVal row As Mem_LoanholdRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMem_LoanholdRow(ByVal ACCTNO As String, ByVal ACCTNAME As String, ByVal HOLDCD As String, ByVal HOLDTYPE As String, ByVal HOLDAMT As Decimal, ByVal HOLDDATE As String, ByVal HOLDUSER As String, ByVal HOLDRMKS As String, ByVal POSTSTAT As String, ByVal POSTDATE As String, ByVal POSTUSER As String) As Mem_LoanholdRow
            Dim rowMem_LoanholdRow As Mem_LoanholdRow = CType(Me.NewRow,Mem_LoanholdRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTNAME, HOLDCD, HOLDTYPE, HOLDAMT, HOLDDATE, HOLDUSER, HOLDRMKS, POSTSTAT, POSTDATE, POSTUSER}
            rowMem_LoanholdRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMem_LoanholdRow)
            Return rowMem_LoanholdRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Mem_LoanholdDataTable = CType(MyBase.Clone,Mem_LoanholdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Mem_LoanholdDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTNAME = MyBase.Columns("ACCTNAME")
            Me.columnHOLDCD = MyBase.Columns("HOLDCD")
            Me.columnHOLDTYPE = MyBase.Columns("HOLDTYPE")
            Me.columnHOLDAMT = MyBase.Columns("HOLDAMT")
            Me.columnHOLDDATE = MyBase.Columns("HOLDDATE")
            Me.columnHOLDUSER = MyBase.Columns("HOLDUSER")
            Me.columnHOLDRMKS = MyBase.Columns("HOLDRMKS")
            Me.columnPOSTSTAT = MyBase.Columns("POSTSTAT")
            Me.columnPOSTDATE = MyBase.Columns("POSTDATE")
            Me.columnPOSTUSER = MyBase.Columns("POSTUSER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTNAME = New Global.System.Data.DataColumn("ACCTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNAME)
            Me.columnHOLDCD = New Global.System.Data.DataColumn("HOLDCD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOLDCD)
            Me.columnHOLDTYPE = New Global.System.Data.DataColumn("HOLDTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOLDTYPE)
            Me.columnHOLDAMT = New Global.System.Data.DataColumn("HOLDAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOLDAMT)
            Me.columnHOLDDATE = New Global.System.Data.DataColumn("HOLDDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOLDDATE)
            Me.columnHOLDUSER = New Global.System.Data.DataColumn("HOLDUSER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOLDUSER)
            Me.columnHOLDRMKS = New Global.System.Data.DataColumn("HOLDRMKS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHOLDRMKS)
            Me.columnPOSTSTAT = New Global.System.Data.DataColumn("POSTSTAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTSTAT)
            Me.columnPOSTDATE = New Global.System.Data.DataColumn("POSTDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTDATE)
            Me.columnPOSTUSER = New Global.System.Data.DataColumn("POSTUSER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTUSER)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMem_LoanholdRow() As Mem_LoanholdRow
            Return CType(Me.NewRow,Mem_LoanholdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Mem_LoanholdRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Mem_LoanholdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Mem_LoanholdRowChangedEvent) Is Nothing) Then
                RaiseEvent Mem_LoanholdRowChanged(Me, New Mem_LoanholdRowChangeEvent(CType(e.Row,Mem_LoanholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Mem_LoanholdRowChangingEvent) Is Nothing) Then
                RaiseEvent Mem_LoanholdRowChanging(Me, New Mem_LoanholdRowChangeEvent(CType(e.Row,Mem_LoanholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Mem_LoanholdRowDeletedEvent) Is Nothing) Then
                RaiseEvent Mem_LoanholdRowDeleted(Me, New Mem_LoanholdRowChangeEvent(CType(e.Row,Mem_LoanholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Mem_LoanholdRowDeletingEvent) Is Nothing) Then
                RaiseEvent Mem_LoanholdRowDeleting(Me, New Mem_LoanholdRowChangeEvent(CType(e.Row,Mem_LoanholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMem_LoanholdRow(ByVal row As Mem_LoanholdRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Mem_LoanholdDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Teller__TranDataTable
        Inherits Global.System.Data.TypedTableBase(Of Teller__TranRow)
        
        Private columnSPUSERNAME As Global.System.Data.DataColumn
        
        Private columnCASHB As Global.System.Data.DataColumn
        
        Private columnCOCIB As Global.System.Data.DataColumn
        
        Private columnADDMREQ As Global.System.Data.DataColumn
        
        Private columnCASHSAV As Global.System.Data.DataColumn
        
        Private columnCASHOR As Global.System.Data.DataColumn
        
        Private columnADDCHECKS As Global.System.Data.DataColumn
        
        Private columnADDLTD As Global.System.Data.DataColumn
        
        Private columnCTFNAME1 As Global.System.Data.DataColumn
        
        Private columnCTFAMT1 As Global.System.Data.DataColumn
        
        Private columnCTFNAME2 As Global.System.Data.DataColumn
        
        Private columnCTFAMT2 As Global.System.Data.DataColumn
        
        Private columnCTFNAME3 As Global.System.Data.DataColumn
        
        Private columnCTFAMT3 As Global.System.Data.DataColumn
        
        Private columnADDCASH As Global.System.Data.DataColumn
        
        Private columnCRSAV As Global.System.Data.DataColumn
        
        Private columnCRORO As Global.System.Data.DataColumn
        
        Private columnCRACC As Global.System.Data.DataColumn
        
        Private columnCRCR As Global.System.Data.DataColumn
        
        Private columnADDTOTAL As Global.System.Data.DataColumn
        
        Private columnDIB As Global.System.Data.DataColumn
        
        Private columnREF As Global.System.Data.DataColumn
        
        Private columnWITH As Global.System.Data.DataColumn
        
        Private columnCHKENC As Global.System.Data.DataColumn
        
        Private columnCOCI As Global.System.Data.DataColumn
        
        Private columnCHKDEP As Global.System.Data.DataColumn
        
        Private columnEMER As Global.System.Data.DataColumn
        
        Private columnCTTNAME1 As Global.System.Data.DataColumn
        
        Private columnCTTAMT1 As Global.System.Data.DataColumn
        
        Private columnCTTNAME2 As Global.System.Data.DataColumn
        
        Private columnCTTAMT2 As Global.System.Data.DataColumn
        
        Private columnCTTNAME3 As Global.System.Data.DataColumn
        
        Private columnCTTAMT3 As Global.System.Data.DataColumn
        
        Private columnTOTDISB As Global.System.Data.DataColumn
        
        Private columnCBALEND As Global.System.Data.DataColumn
        
        Private columnCTTCEND As Global.System.Data.DataColumn
        
        Private columnOVER As Global.System.Data.DataColumn
        
        Private columnB_1000 As Global.System.Data.DataColumn
        
        Private columnB_500 As Global.System.Data.DataColumn
        
        Private columnB_200 As Global.System.Data.DataColumn
        
        Private columnB_100 As Global.System.Data.DataColumn
        
        Private columnB_50 As Global.System.Data.DataColumn
        
        Private columnB_20 As Global.System.Data.DataColumn
        
        Private columnB_10 As Global.System.Data.DataColumn
        
        Private columnB_5 As Global.System.Data.DataColumn
        
        Private columnB_1 As Global.System.Data.DataColumn
        
        Private columnB_P50 As Global.System.Data.DataColumn
        
        Private columnB_P25 As Global.System.Data.DataColumn
        
        Private columnB_P10 As Global.System.Data.DataColumn
        
        Private columnB_P05 As Global.System.Data.DataColumn
        
        Private columnB_P01 As Global.System.Data.DataColumn
        
        Private columnTCCOUNT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Teller _Tran"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASHBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASHB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COCIBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOCIB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDMREQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDMREQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASHSAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASHSAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASHORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASHOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDCHECKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDCHECKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDLTDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDLTD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTFNAME1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTFNAME1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTFAMT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTFAMT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTFNAME2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTFNAME2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTFAMT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTFAMT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTFNAME3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTFNAME3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTFAMT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTFAMT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDCASHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDCASH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CRSAVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCRSAV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CROROColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCRORO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CRACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCRACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CRCRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCRCR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADDTOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WITHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWITH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKENCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKENC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COCIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOCI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKDEPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKDEP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTTNAME1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTTNAME1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTTAMT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTTAMT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTTNAME2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTTNAME2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTTAMT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTTAMT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTTNAME3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTTNAME3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTTAMT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTTAMT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTDISBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTDISB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CBALENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCBALEND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTTCENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTTCEND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OVERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOVER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_1000Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_1000
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_500Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_500
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_200Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_200
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_100Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_100
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_50Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_50
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_P50Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_P50
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_P25Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_P25
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_P10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_P10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_P05Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_P05
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_P01Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_P01
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Teller__TranRow
            Get
                Return CType(Me.Rows(index),Teller__TranRow)
            End Get
        End Property
        
        Public Event Teller__TranRowChanging As Teller__TranRowChangeEventHandler
        
        Public Event Teller__TranRowChanged As Teller__TranRowChangeEventHandler
        
        Public Event Teller__TranRowDeleting As Teller__TranRowChangeEventHandler
        
        Public Event Teller__TranRowDeleted As Teller__TranRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTeller__TranRow(ByVal row As Teller__TranRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTeller__TranRow( _
                    ByVal SPUSERNAME As String,  _
                    ByVal CASHB As Decimal,  _
                    ByVal COCIB As Decimal,  _
                    ByVal ADDMREQ As Decimal,  _
                    ByVal CASHSAV As Decimal,  _
                    ByVal CASHOR As Decimal,  _
                    ByVal ADDCHECKS As Decimal,  _
                    ByVal ADDLTD As Decimal,  _
                    ByVal CTFNAME1 As String,  _
                    ByVal CTFAMT1 As Decimal,  _
                    ByVal CTFNAME2 As String,  _
                    ByVal CTFAMT2 As Decimal,  _
                    ByVal CTFNAME3 As String,  _
                    ByVal CTFAMT3 As Decimal,  _
                    ByVal ADDCASH As Decimal,  _
                    ByVal CRSAV As Decimal,  _
                    ByVal CRORO As Decimal,  _
                    ByVal CRACC As Decimal,  _
                    ByVal CRCR As Decimal,  _
                    ByVal ADDTOTAL As Decimal,  _
                    ByVal DIB As Decimal,  _
                    ByVal REF As Decimal,  _
                    ByVal _WITH As Decimal,  _
                    ByVal CHKENC As Decimal,  _
                    ByVal COCI As Decimal,  _
                    ByVal CHKDEP As Decimal,  _
                    ByVal EMER As Decimal,  _
                    ByVal CTTNAME1 As String,  _
                    ByVal CTTAMT1 As Decimal,  _
                    ByVal CTTNAME2 As String,  _
                    ByVal CTTAMT2 As Decimal,  _
                    ByVal CTTNAME3 As String,  _
                    ByVal CTTAMT3 As Decimal,  _
                    ByVal TOTDISB As Decimal,  _
                    ByVal CBALEND As Decimal,  _
                    ByVal CTTCEND As Decimal,  _
                    ByVal OVER As Decimal,  _
                    ByVal B_1000 As Long,  _
                    ByVal B_500 As Long,  _
                    ByVal B_200 As Long,  _
                    ByVal B_100 As Long,  _
                    ByVal B_50 As Long,  _
                    ByVal B_20 As Long,  _
                    ByVal B_10 As Long,  _
                    ByVal B_5 As Long,  _
                    ByVal B_1 As Long,  _
                    ByVal B_P50 As Long,  _
                    ByVal B_P25 As Long,  _
                    ByVal B_P10 As Long,  _
                    ByVal B_P05 As Long,  _
                    ByVal B_P01 As Long,  _
                    ByVal TCCOUNT As Decimal) As Teller__TranRow
            Dim rowTeller__TranRow As Teller__TranRow = CType(Me.NewRow,Teller__TranRow)
            Dim columnValuesArray() As Object = New Object() {SPUSERNAME, CASHB, COCIB, ADDMREQ, CASHSAV, CASHOR, ADDCHECKS, ADDLTD, CTFNAME1, CTFAMT1, CTFNAME2, CTFAMT2, CTFNAME3, CTFAMT3, ADDCASH, CRSAV, CRORO, CRACC, CRCR, ADDTOTAL, DIB, REF, _WITH, CHKENC, COCI, CHKDEP, EMER, CTTNAME1, CTTAMT1, CTTNAME2, CTTAMT2, CTTNAME3, CTTAMT3, TOTDISB, CBALEND, CTTCEND, OVER, B_1000, B_500, B_200, B_100, B_50, B_20, B_10, B_5, B_1, B_P50, B_P25, B_P10, B_P05, B_P01, TCCOUNT}
            rowTeller__TranRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTeller__TranRow)
            Return rowTeller__TranRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Teller__TranDataTable = CType(MyBase.Clone,Teller__TranDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Teller__TranDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSPUSERNAME = MyBase.Columns("SPUSERNAME")
            Me.columnCASHB = MyBase.Columns("CASHB")
            Me.columnCOCIB = MyBase.Columns("COCIB")
            Me.columnADDMREQ = MyBase.Columns("ADDMREQ")
            Me.columnCASHSAV = MyBase.Columns("CASHSAV")
            Me.columnCASHOR = MyBase.Columns("CASHOR")
            Me.columnADDCHECKS = MyBase.Columns("ADDCHECKS")
            Me.columnADDLTD = MyBase.Columns("ADDLTD")
            Me.columnCTFNAME1 = MyBase.Columns("CTFNAME1")
            Me.columnCTFAMT1 = MyBase.Columns("CTFAMT1")
            Me.columnCTFNAME2 = MyBase.Columns("CTFNAME2")
            Me.columnCTFAMT2 = MyBase.Columns("CTFAMT2")
            Me.columnCTFNAME3 = MyBase.Columns("CTFNAME3")
            Me.columnCTFAMT3 = MyBase.Columns("CTFAMT3")
            Me.columnADDCASH = MyBase.Columns("ADDCASH")
            Me.columnCRSAV = MyBase.Columns("CRSAV")
            Me.columnCRORO = MyBase.Columns("CRORO")
            Me.columnCRACC = MyBase.Columns("CRACC")
            Me.columnCRCR = MyBase.Columns("CRCR")
            Me.columnADDTOTAL = MyBase.Columns("ADDTOTAL")
            Me.columnDIB = MyBase.Columns("DIB")
            Me.columnREF = MyBase.Columns("REF")
            Me.columnWITH = MyBase.Columns("WITH")
            Me.columnCHKENC = MyBase.Columns("CHKENC")
            Me.columnCOCI = MyBase.Columns("COCI")
            Me.columnCHKDEP = MyBase.Columns("CHKDEP")
            Me.columnEMER = MyBase.Columns("EMER")
            Me.columnCTTNAME1 = MyBase.Columns("CTTNAME1")
            Me.columnCTTAMT1 = MyBase.Columns("CTTAMT1")
            Me.columnCTTNAME2 = MyBase.Columns("CTTNAME2")
            Me.columnCTTAMT2 = MyBase.Columns("CTTAMT2")
            Me.columnCTTNAME3 = MyBase.Columns("CTTNAME3")
            Me.columnCTTAMT3 = MyBase.Columns("CTTAMT3")
            Me.columnTOTDISB = MyBase.Columns("TOTDISB")
            Me.columnCBALEND = MyBase.Columns("CBALEND")
            Me.columnCTTCEND = MyBase.Columns("CTTCEND")
            Me.columnOVER = MyBase.Columns("OVER")
            Me.columnB_1000 = MyBase.Columns("B_1000")
            Me.columnB_500 = MyBase.Columns("B_500")
            Me.columnB_200 = MyBase.Columns("B_200")
            Me.columnB_100 = MyBase.Columns("B_100")
            Me.columnB_50 = MyBase.Columns("B_50")
            Me.columnB_20 = MyBase.Columns("B_20")
            Me.columnB_10 = MyBase.Columns("B_10")
            Me.columnB_5 = MyBase.Columns("B_5")
            Me.columnB_1 = MyBase.Columns("B_1")
            Me.columnB_P50 = MyBase.Columns("B_P50")
            Me.columnB_P25 = MyBase.Columns("B_P25")
            Me.columnB_P10 = MyBase.Columns("B_P10")
            Me.columnB_P05 = MyBase.Columns("B_P05")
            Me.columnB_P01 = MyBase.Columns("B_P01")
            Me.columnTCCOUNT = MyBase.Columns("TCCOUNT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSPUSERNAME = New Global.System.Data.DataColumn("SPUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPUSERNAME)
            Me.columnCASHB = New Global.System.Data.DataColumn("CASHB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASHB)
            Me.columnCOCIB = New Global.System.Data.DataColumn("COCIB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOCIB)
            Me.columnADDMREQ = New Global.System.Data.DataColumn("ADDMREQ", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDMREQ)
            Me.columnCASHSAV = New Global.System.Data.DataColumn("CASHSAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASHSAV)
            Me.columnCASHOR = New Global.System.Data.DataColumn("CASHOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASHOR)
            Me.columnADDCHECKS = New Global.System.Data.DataColumn("ADDCHECKS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDCHECKS)
            Me.columnADDLTD = New Global.System.Data.DataColumn("ADDLTD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDLTD)
            Me.columnCTFNAME1 = New Global.System.Data.DataColumn("CTFNAME1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTFNAME1)
            Me.columnCTFAMT1 = New Global.System.Data.DataColumn("CTFAMT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTFAMT1)
            Me.columnCTFNAME2 = New Global.System.Data.DataColumn("CTFNAME2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTFNAME2)
            Me.columnCTFAMT2 = New Global.System.Data.DataColumn("CTFAMT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTFAMT2)
            Me.columnCTFNAME3 = New Global.System.Data.DataColumn("CTFNAME3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTFNAME3)
            Me.columnCTFAMT3 = New Global.System.Data.DataColumn("CTFAMT3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTFAMT3)
            Me.columnADDCASH = New Global.System.Data.DataColumn("ADDCASH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDCASH)
            Me.columnCRSAV = New Global.System.Data.DataColumn("CRSAV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCRSAV)
            Me.columnCRORO = New Global.System.Data.DataColumn("CRORO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCRORO)
            Me.columnCRACC = New Global.System.Data.DataColumn("CRACC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCRACC)
            Me.columnCRCR = New Global.System.Data.DataColumn("CRCR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCRCR)
            Me.columnADDTOTAL = New Global.System.Data.DataColumn("ADDTOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDTOTAL)
            Me.columnDIB = New Global.System.Data.DataColumn("DIB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIB)
            Me.columnREF = New Global.System.Data.DataColumn("REF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREF)
            Me.columnWITH = New Global.System.Data.DataColumn("WITH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.columnWITH.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "WITHColumn")
            Me.columnWITH.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnWITH")
            Me.columnWITH.ExtendedProperties.Add("Generator_UserColumnName", "WITH")
            MyBase.Columns.Add(Me.columnWITH)
            Me.columnCHKENC = New Global.System.Data.DataColumn("CHKENC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKENC)
            Me.columnCOCI = New Global.System.Data.DataColumn("COCI", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOCI)
            Me.columnCHKDEP = New Global.System.Data.DataColumn("CHKDEP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKDEP)
            Me.columnEMER = New Global.System.Data.DataColumn("EMER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMER)
            Me.columnCTTNAME1 = New Global.System.Data.DataColumn("CTTNAME1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTTNAME1)
            Me.columnCTTAMT1 = New Global.System.Data.DataColumn("CTTAMT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTTAMT1)
            Me.columnCTTNAME2 = New Global.System.Data.DataColumn("CTTNAME2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTTNAME2)
            Me.columnCTTAMT2 = New Global.System.Data.DataColumn("CTTAMT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTTAMT2)
            Me.columnCTTNAME3 = New Global.System.Data.DataColumn("CTTNAME3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTTNAME3)
            Me.columnCTTAMT3 = New Global.System.Data.DataColumn("CTTAMT3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTTAMT3)
            Me.columnTOTDISB = New Global.System.Data.DataColumn("TOTDISB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTDISB)
            Me.columnCBALEND = New Global.System.Data.DataColumn("CBALEND", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCBALEND)
            Me.columnCTTCEND = New Global.System.Data.DataColumn("CTTCEND", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTTCEND)
            Me.columnOVER = New Global.System.Data.DataColumn("OVER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOVER)
            Me.columnB_1000 = New Global.System.Data.DataColumn("B_1000", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_1000)
            Me.columnB_500 = New Global.System.Data.DataColumn("B_500", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_500)
            Me.columnB_200 = New Global.System.Data.DataColumn("B_200", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_200)
            Me.columnB_100 = New Global.System.Data.DataColumn("B_100", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_100)
            Me.columnB_50 = New Global.System.Data.DataColumn("B_50", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_50)
            Me.columnB_20 = New Global.System.Data.DataColumn("B_20", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_20)
            Me.columnB_10 = New Global.System.Data.DataColumn("B_10", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_10)
            Me.columnB_5 = New Global.System.Data.DataColumn("B_5", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_5)
            Me.columnB_1 = New Global.System.Data.DataColumn("B_1", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_1)
            Me.columnB_P50 = New Global.System.Data.DataColumn("B_P50", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_P50)
            Me.columnB_P25 = New Global.System.Data.DataColumn("B_P25", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_P25)
            Me.columnB_P10 = New Global.System.Data.DataColumn("B_P10", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_P10)
            Me.columnB_P05 = New Global.System.Data.DataColumn("B_P05", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_P05)
            Me.columnB_P01 = New Global.System.Data.DataColumn("B_P01", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_P01)
            Me.columnTCCOUNT = New Global.System.Data.DataColumn("TCCOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCCOUNT)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTeller__TranRow() As Teller__TranRow
            Return CType(Me.NewRow,Teller__TranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Teller__TranRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Teller__TranRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Teller__TranRowChangedEvent) Is Nothing) Then
                RaiseEvent Teller__TranRowChanged(Me, New Teller__TranRowChangeEvent(CType(e.Row,Teller__TranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Teller__TranRowChangingEvent) Is Nothing) Then
                RaiseEvent Teller__TranRowChanging(Me, New Teller__TranRowChangeEvent(CType(e.Row,Teller__TranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Teller__TranRowDeletedEvent) Is Nothing) Then
                RaiseEvent Teller__TranRowDeleted(Me, New Teller__TranRowChangeEvent(CType(e.Row,Teller__TranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Teller__TranRowDeletingEvent) Is Nothing) Then
                RaiseEvent Teller__TranRowDeleting(Me, New Teller__TranRowChangeEvent(CType(e.Row,Teller__TranRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTeller__TranRow(ByVal row As Teller__TranRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Teller__TranDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Teller_BlotterDataTable
        Inherits Global.System.Data.TypedTableBase(Of Teller_BlotterRow)
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columnTCODE As Global.System.Data.DataColumn
        
        Private columnCASH As Global.System.Data.DataColumn
        
        Private columnCHECK As Global.System.Data.DataColumn
        
        Private columnWITHD As Global.System.Data.DataColumn
        
        Private columnELOAN As Global.System.Data.DataColumn
        
        Private columnREFUND As Global.System.Data.DataColumn
        
        Private columnCHKACC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Teller_Blotter"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WITHDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWITHD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ELOANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnELOAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFUNDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFUND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Teller_BlotterRow
            Get
                Return CType(Me.Rows(index),Teller_BlotterRow)
            End Get
        End Property
        
        Public Event Teller_BlotterRowChanging As Teller_BlotterRowChangeEventHandler
        
        Public Event Teller_BlotterRowChanged As Teller_BlotterRowChangeEventHandler
        
        Public Event Teller_BlotterRowDeleting As Teller_BlotterRowChangeEventHandler
        
        Public Event Teller_BlotterRowDeleted As Teller_BlotterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTeller_BlotterRow(ByVal row As Teller_BlotterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTeller_BlotterRow(ByVal NAME As String, ByVal TCODE As String, ByVal CASH As Decimal, ByVal CHECK As Decimal, ByVal WITHD As Decimal, ByVal ELOAN As Decimal, ByVal REFUND As Decimal, ByVal CHKACC As Decimal) As Teller_BlotterRow
            Dim rowTeller_BlotterRow As Teller_BlotterRow = CType(Me.NewRow,Teller_BlotterRow)
            Dim columnValuesArray() As Object = New Object() {NAME, TCODE, CASH, CHECK, WITHD, ELOAN, REFUND, CHKACC}
            rowTeller_BlotterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTeller_BlotterRow)
            Return rowTeller_BlotterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Teller_BlotterDataTable = CType(MyBase.Clone,Teller_BlotterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Teller_BlotterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnTCODE = MyBase.Columns("TCODE")
            Me.columnCASH = MyBase.Columns("CASH")
            Me.columnCHECK = MyBase.Columns("CHECK")
            Me.columnWITHD = MyBase.Columns("WITHD")
            Me.columnELOAN = MyBase.Columns("ELOAN")
            Me.columnREFUND = MyBase.Columns("REFUND")
            Me.columnCHKACC = MyBase.Columns("CHKACC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnTCODE = New Global.System.Data.DataColumn("TCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTCODE)
            Me.columnCASH = New Global.System.Data.DataColumn("CASH", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH)
            Me.columnCHECK = New Global.System.Data.DataColumn("CHECK", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHECK)
            Me.columnWITHD = New Global.System.Data.DataColumn("WITHD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWITHD)
            Me.columnELOAN = New Global.System.Data.DataColumn("ELOAN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnELOAN)
            Me.columnREFUND = New Global.System.Data.DataColumn("REFUND", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFUND)
            Me.columnCHKACC = New Global.System.Data.DataColumn("CHKACC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKACC)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTeller_BlotterRow() As Teller_BlotterRow
            Return CType(Me.NewRow,Teller_BlotterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Teller_BlotterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Teller_BlotterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Teller_BlotterRowChangedEvent) Is Nothing) Then
                RaiseEvent Teller_BlotterRowChanged(Me, New Teller_BlotterRowChangeEvent(CType(e.Row,Teller_BlotterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Teller_BlotterRowChangingEvent) Is Nothing) Then
                RaiseEvent Teller_BlotterRowChanging(Me, New Teller_BlotterRowChangeEvent(CType(e.Row,Teller_BlotterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Teller_BlotterRowDeletedEvent) Is Nothing) Then
                RaiseEvent Teller_BlotterRowDeleted(Me, New Teller_BlotterRowChangeEvent(CType(e.Row,Teller_BlotterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Teller_BlotterRowDeletingEvent) Is Nothing) Then
                RaiseEvent Teller_BlotterRowDeleting(Me, New Teller_BlotterRowChangeEvent(CType(e.Row,Teller_BlotterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTeller_BlotterRow(ByVal row As Teller_BlotterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Teller_BlotterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOM_NAcctsDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOM_NAcctsRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnACCTADDR1 As Global.System.Data.DataColumn
        
        Private columnADD_DATE As Global.System.Data.DataColumn
        
        Private columnACCTIDEP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOM_NAccts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTIDEPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTIDEP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOM_NAcctsRow
            Get
                Return CType(Me.Rows(index),EOM_NAcctsRow)
            End Get
        End Property
        
        Public Event EOM_NAcctsRowChanging As EOM_NAcctsRowChangeEventHandler
        
        Public Event EOM_NAcctsRowChanged As EOM_NAcctsRowChangeEventHandler
        
        Public Event EOM_NAcctsRowDeleting As EOM_NAcctsRowChangeEventHandler
        
        Public Event EOM_NAcctsRowDeleted As EOM_NAcctsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOM_NAcctsRow(ByVal row As EOM_NAcctsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOM_NAcctsRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal ACCTADDR1 As String, ByVal ADD_DATE As String, ByVal ACCTIDEP As Decimal) As EOM_NAcctsRow
            Dim rowEOM_NAcctsRow As EOM_NAcctsRow = CType(Me.NewRow,EOM_NAcctsRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, ACCTADDR1, ADD_DATE, ACCTIDEP}
            rowEOM_NAcctsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOM_NAcctsRow)
            Return rowEOM_NAcctsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOM_NAcctsDataTable = CType(MyBase.Clone,EOM_NAcctsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOM_NAcctsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnACCTADDR1 = MyBase.Columns("ACCTADDR1")
            Me.columnADD_DATE = MyBase.Columns("ADD_DATE")
            Me.columnACCTIDEP = MyBase.Columns("ACCTIDEP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnACCTADDR1 = New Global.System.Data.DataColumn("ACCTADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTADDR1)
            Me.columnADD_DATE = New Global.System.Data.DataColumn("ADD_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_DATE)
            Me.columnACCTIDEP = New Global.System.Data.DataColumn("ACCTIDEP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTIDEP)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOM_NAcctsRow() As EOM_NAcctsRow
            Return CType(Me.NewRow,EOM_NAcctsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOM_NAcctsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOM_NAcctsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOM_NAcctsRowChangedEvent) Is Nothing) Then
                RaiseEvent EOM_NAcctsRowChanged(Me, New EOM_NAcctsRowChangeEvent(CType(e.Row,EOM_NAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOM_NAcctsRowChangingEvent) Is Nothing) Then
                RaiseEvent EOM_NAcctsRowChanging(Me, New EOM_NAcctsRowChangeEvent(CType(e.Row,EOM_NAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOM_NAcctsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOM_NAcctsRowDeleted(Me, New EOM_NAcctsRowChangeEvent(CType(e.Row,EOM_NAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOM_NAcctsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOM_NAcctsRowDeleting(Me, New EOM_NAcctsRowChangeEvent(CType(e.Row,EOM_NAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOM_NAcctsRow(ByVal row As EOM_NAcctsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOM_NAcctsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOM_BMinDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOM_BMinRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnACCTSTAT As Global.System.Data.DataColumn
        
        Private columnACCTOBAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOM_BMin"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSTATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSTAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTOBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTOBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOM_BMinRow
            Get
                Return CType(Me.Rows(index),EOM_BMinRow)
            End Get
        End Property
        
        Public Event EOM_BMinRowChanging As EOM_BMinRowChangeEventHandler
        
        Public Event EOM_BMinRowChanged As EOM_BMinRowChangeEventHandler
        
        Public Event EOM_BMinRowDeleting As EOM_BMinRowChangeEventHandler
        
        Public Event EOM_BMinRowDeleted As EOM_BMinRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOM_BMinRow(ByVal row As EOM_BMinRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOM_BMinRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal ACCTSTAT As String, ByVal ACCTOBAL As Decimal) As EOM_BMinRow
            Dim rowEOM_BMinRow As EOM_BMinRow = CType(Me.NewRow,EOM_BMinRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, ACCTSTAT, ACCTOBAL}
            rowEOM_BMinRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOM_BMinRow)
            Return rowEOM_BMinRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOM_BMinDataTable = CType(MyBase.Clone,EOM_BMinDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOM_BMinDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnACCTSTAT = MyBase.Columns("ACCTSTAT")
            Me.columnACCTOBAL = MyBase.Columns("ACCTOBAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnACCTSTAT = New Global.System.Data.DataColumn("ACCTSTAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSTAT)
            Me.columnACCTOBAL = New Global.System.Data.DataColumn("ACCTOBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTOBAL)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOM_BMinRow() As EOM_BMinRow
            Return CType(Me.NewRow,EOM_BMinRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOM_BMinRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOM_BMinRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOM_BMinRowChangedEvent) Is Nothing) Then
                RaiseEvent EOM_BMinRowChanged(Me, New EOM_BMinRowChangeEvent(CType(e.Row,EOM_BMinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOM_BMinRowChangingEvent) Is Nothing) Then
                RaiseEvent EOM_BMinRowChanging(Me, New EOM_BMinRowChangeEvent(CType(e.Row,EOM_BMinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOM_BMinRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOM_BMinRowDeleted(Me, New EOM_BMinRowChangeEvent(CType(e.Row,EOM_BMinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOM_BMinRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOM_BMinRowDeleting(Me, New EOM_BMinRowChangeEvent(CType(e.Row,EOM_BMinRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOM_BMinRow(ByVal row As EOM_BMinRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOM_BMinDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOM_AccIntDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOM_AccIntRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columnADB As Global.System.Data.DataColumn
        
        Private columnMTD As Global.System.Data.DataColumn
        
        Private columnQTD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOM_AccInt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOM_AccIntRow
            Get
                Return CType(Me.Rows(index),EOM_AccIntRow)
            End Get
        End Property
        
        Public Event EOM_AccIntRowChanging As EOM_AccIntRowChangeEventHandler
        
        Public Event EOM_AccIntRowChanged As EOM_AccIntRowChangeEventHandler
        
        Public Event EOM_AccIntRowDeleting As EOM_AccIntRowChangeEventHandler
        
        Public Event EOM_AccIntRowDeleted As EOM_AccIntRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOM_AccIntRow(ByVal row As EOM_AccIntRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOM_AccIntRow(ByVal ACCTNO As String, ByVal NAME As String, ByVal ADB As Decimal, ByVal MTD As Double, ByVal QTD As Decimal) As EOM_AccIntRow
            Dim rowEOM_AccIntRow As EOM_AccIntRow = CType(Me.NewRow,EOM_AccIntRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, NAME, ADB, MTD, QTD}
            rowEOM_AccIntRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOM_AccIntRow)
            Return rowEOM_AccIntRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOM_AccIntDataTable = CType(MyBase.Clone,EOM_AccIntDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOM_AccIntDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnADB = MyBase.Columns("ADB")
            Me.columnMTD = MyBase.Columns("MTD")
            Me.columnQTD = MyBase.Columns("QTD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnADB = New Global.System.Data.DataColumn("ADB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADB)
            Me.columnMTD = New Global.System.Data.DataColumn("MTD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTD)
            Me.columnQTD = New Global.System.Data.DataColumn("QTD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTD)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOM_AccIntRow() As EOM_AccIntRow
            Return CType(Me.NewRow,EOM_AccIntRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOM_AccIntRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOM_AccIntRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOM_AccIntRowChangedEvent) Is Nothing) Then
                RaiseEvent EOM_AccIntRowChanged(Me, New EOM_AccIntRowChangeEvent(CType(e.Row,EOM_AccIntRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOM_AccIntRowChangingEvent) Is Nothing) Then
                RaiseEvent EOM_AccIntRowChanging(Me, New EOM_AccIntRowChangeEvent(CType(e.Row,EOM_AccIntRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOM_AccIntRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOM_AccIntRowDeleted(Me, New EOM_AccIntRowChangeEvent(CType(e.Row,EOM_AccIntRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOM_AccIntRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOM_AccIntRowDeleting(Me, New EOM_AccIntRowChangeEvent(CType(e.Row,EOM_AccIntRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOM_AccIntRow(ByVal row As EOM_AccIntRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOM_AccIntDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOM_DAcctsDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOM_DAcctsRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnLTRANDATE As Global.System.Data.DataColumn
        
        Private columnACCTOBAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOM_DAccts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LTRANDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLTRANDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTOBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTOBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOM_DAcctsRow
            Get
                Return CType(Me.Rows(index),EOM_DAcctsRow)
            End Get
        End Property
        
        Public Event EOM_DAcctsRowChanging As EOM_DAcctsRowChangeEventHandler
        
        Public Event EOM_DAcctsRowChanged As EOM_DAcctsRowChangeEventHandler
        
        Public Event EOM_DAcctsRowDeleting As EOM_DAcctsRowChangeEventHandler
        
        Public Event EOM_DAcctsRowDeleted As EOM_DAcctsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOM_DAcctsRow(ByVal row As EOM_DAcctsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOM_DAcctsRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal LTRANDATE As String, ByVal ACCTOBAL As Decimal) As EOM_DAcctsRow
            Dim rowEOM_DAcctsRow As EOM_DAcctsRow = CType(Me.NewRow,EOM_DAcctsRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, LTRANDATE, ACCTOBAL}
            rowEOM_DAcctsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOM_DAcctsRow)
            Return rowEOM_DAcctsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOM_DAcctsDataTable = CType(MyBase.Clone,EOM_DAcctsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOM_DAcctsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnLTRANDATE = MyBase.Columns("LTRANDATE")
            Me.columnACCTOBAL = MyBase.Columns("ACCTOBAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnLTRANDATE = New Global.System.Data.DataColumn("LTRANDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLTRANDATE)
            Me.columnACCTOBAL = New Global.System.Data.DataColumn("ACCTOBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTOBAL)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOM_DAcctsRow() As EOM_DAcctsRow
            Return CType(Me.NewRow,EOM_DAcctsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOM_DAcctsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOM_DAcctsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOM_DAcctsRowChangedEvent) Is Nothing) Then
                RaiseEvent EOM_DAcctsRowChanged(Me, New EOM_DAcctsRowChangeEvent(CType(e.Row,EOM_DAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOM_DAcctsRowChangingEvent) Is Nothing) Then
                RaiseEvent EOM_DAcctsRowChanging(Me, New EOM_DAcctsRowChangeEvent(CType(e.Row,EOM_DAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOM_DAcctsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOM_DAcctsRowDeleted(Me, New EOM_DAcctsRowChangeEvent(CType(e.Row,EOM_DAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOM_DAcctsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOM_DAcctsRowDeleting(Me, New EOM_DAcctsRowChangeEvent(CType(e.Row,EOM_DAcctsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOM_DAcctsRow(ByVal row As EOM_DAcctsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOM_DAcctsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOM_BRunupDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOM_BRunupRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnACCTSTAT As Global.System.Data.DataColumn
        
        Private columnLTRANDATE As Global.System.Data.DataColumn
        
        Private columnACCTOBAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOM_BRunup"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSTATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSTAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LTRANDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLTRANDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTOBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTOBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOM_BRunupRow
            Get
                Return CType(Me.Rows(index),EOM_BRunupRow)
            End Get
        End Property
        
        Public Event EOM_BRunupRowChanging As EOM_BRunupRowChangeEventHandler
        
        Public Event EOM_BRunupRowChanged As EOM_BRunupRowChangeEventHandler
        
        Public Event EOM_BRunupRowDeleting As EOM_BRunupRowChangeEventHandler
        
        Public Event EOM_BRunupRowDeleted As EOM_BRunupRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOM_BRunupRow(ByVal row As EOM_BRunupRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOM_BRunupRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal ACCTSTAT As String, ByVal LTRANDATE As String, ByVal ACCTOBAL As Decimal) As EOM_BRunupRow
            Dim rowEOM_BRunupRow As EOM_BRunupRow = CType(Me.NewRow,EOM_BRunupRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, ACCTSTAT, LTRANDATE, ACCTOBAL}
            rowEOM_BRunupRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOM_BRunupRow)
            Return rowEOM_BRunupRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOM_BRunupDataTable = CType(MyBase.Clone,EOM_BRunupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOM_BRunupDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnACCTSTAT = MyBase.Columns("ACCTSTAT")
            Me.columnLTRANDATE = MyBase.Columns("LTRANDATE")
            Me.columnACCTOBAL = MyBase.Columns("ACCTOBAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnACCTSTAT = New Global.System.Data.DataColumn("ACCTSTAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSTAT)
            Me.columnLTRANDATE = New Global.System.Data.DataColumn("LTRANDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLTRANDATE)
            Me.columnACCTOBAL = New Global.System.Data.DataColumn("ACCTOBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTOBAL)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOM_BRunupRow() As EOM_BRunupRow
            Return CType(Me.NewRow,EOM_BRunupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOM_BRunupRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOM_BRunupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOM_BRunupRowChangedEvent) Is Nothing) Then
                RaiseEvent EOM_BRunupRowChanged(Me, New EOM_BRunupRowChangeEvent(CType(e.Row,EOM_BRunupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOM_BRunupRowChangingEvent) Is Nothing) Then
                RaiseEvent EOM_BRunupRowChanging(Me, New EOM_BRunupRowChangeEvent(CType(e.Row,EOM_BRunupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOM_BRunupRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOM_BRunupRowDeleted(Me, New EOM_BRunupRowChangeEvent(CType(e.Row,EOM_BRunupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOM_BRunupRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOM_BRunupRowDeleting(Me, New EOM_BRunupRowChangeEvent(CType(e.Row,EOM_BRunupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOM_BRunupRow(ByVal row As EOM_BRunupRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOM_BRunupDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOQ_IntPaidDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOQ_IntPaidRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnOLDBAL As Global.System.Data.DataColumn
        
        Private columnQTD As Global.System.Data.DataColumn
        
        Private columnWTAX As Global.System.Data.DataColumn
        
        Private columnACCTOBAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOQ_IntPaid"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OLDBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOLDBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WTAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWTAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTOBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTOBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOQ_IntPaidRow
            Get
                Return CType(Me.Rows(index),EOQ_IntPaidRow)
            End Get
        End Property
        
        Public Event EOQ_IntPaidRowChanging As EOQ_IntPaidRowChangeEventHandler
        
        Public Event EOQ_IntPaidRowChanged As EOQ_IntPaidRowChangeEventHandler
        
        Public Event EOQ_IntPaidRowDeleting As EOQ_IntPaidRowChangeEventHandler
        
        Public Event EOQ_IntPaidRowDeleted As EOQ_IntPaidRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOQ_IntPaidRow(ByVal row As EOQ_IntPaidRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOQ_IntPaidRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal OLDBAL As Decimal, ByVal QTD As Decimal, ByVal WTAX As Decimal, ByVal ACCTOBAL As Decimal) As EOQ_IntPaidRow
            Dim rowEOQ_IntPaidRow As EOQ_IntPaidRow = CType(Me.NewRow,EOQ_IntPaidRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, OLDBAL, QTD, WTAX, ACCTOBAL}
            rowEOQ_IntPaidRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOQ_IntPaidRow)
            Return rowEOQ_IntPaidRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOQ_IntPaidDataTable = CType(MyBase.Clone,EOQ_IntPaidDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOQ_IntPaidDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnOLDBAL = MyBase.Columns("OLDBAL")
            Me.columnQTD = MyBase.Columns("QTD")
            Me.columnWTAX = MyBase.Columns("WTAX")
            Me.columnACCTOBAL = MyBase.Columns("ACCTOBAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnOLDBAL = New Global.System.Data.DataColumn("OLDBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOLDBAL)
            Me.columnQTD = New Global.System.Data.DataColumn("QTD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTD)
            Me.columnWTAX = New Global.System.Data.DataColumn("WTAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWTAX)
            Me.columnACCTOBAL = New Global.System.Data.DataColumn("ACCTOBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTOBAL)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOQ_IntPaidRow() As EOQ_IntPaidRow
            Return CType(Me.NewRow,EOQ_IntPaidRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOQ_IntPaidRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOQ_IntPaidRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOQ_IntPaidRowChangedEvent) Is Nothing) Then
                RaiseEvent EOQ_IntPaidRowChanged(Me, New EOQ_IntPaidRowChangeEvent(CType(e.Row,EOQ_IntPaidRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOQ_IntPaidRowChangingEvent) Is Nothing) Then
                RaiseEvent EOQ_IntPaidRowChanging(Me, New EOQ_IntPaidRowChangeEvent(CType(e.Row,EOQ_IntPaidRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOQ_IntPaidRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOQ_IntPaidRowDeleted(Me, New EOQ_IntPaidRowChangeEvent(CType(e.Row,EOQ_IntPaidRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOQ_IntPaidRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOQ_IntPaidRowDeleting(Me, New EOQ_IntPaidRowChangeEvent(CType(e.Row,EOQ_IntPaidRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOQ_IntPaidRow(ByVal row As EOQ_IntPaidRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOQ_IntPaidDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOD_BTotalsDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOD_BTotalsRow)
        
        Private columnSAW As Global.System.Data.DataColumn
        
        Private columnSADM As Global.System.Data.DataColumn
        
        Private columnSACD As Global.System.Data.DataColumn
        
        Private columnSAHD As Global.System.Data.DataColumn
        
        Private columnSACM As Global.System.Data.DataColumn
        
        Private columnCSAW As Global.System.Data.DataColumn
        
        Private columnCSADM As Global.System.Data.DataColumn
        
        Private columnCSACD As Global.System.Data.DataColumn
        
        Private columnCSAHD As Global.System.Data.DataColumn
        
        Private columnCSACM As Global.System.Data.DataColumn
        
        Private columnLOC As Global.System.Data.DataColumn
        
        Private columnREG As Global.System.Data.DataColumn
        
        Private columnOUS As Global.System.Data.DataColumn
        
        Private columnCLOC As Global.System.Data.DataColumn
        
        Private columnCREG As Global.System.Data.DataColumn
        
        Private columnCOUS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOD_BTotals"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SADMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSADM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SAHDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSAHD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SACMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSACM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSAWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSAW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSADMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSADM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSACDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSACD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSAHDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSAHD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSACMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSACM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLOCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOD_BTotalsRow
            Get
                Return CType(Me.Rows(index),EOD_BTotalsRow)
            End Get
        End Property
        
        Public Event EOD_BTotalsRowChanging As EOD_BTotalsRowChangeEventHandler
        
        Public Event EOD_BTotalsRowChanged As EOD_BTotalsRowChangeEventHandler
        
        Public Event EOD_BTotalsRowDeleting As EOD_BTotalsRowChangeEventHandler
        
        Public Event EOD_BTotalsRowDeleted As EOD_BTotalsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOD_BTotalsRow(ByVal row As EOD_BTotalsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOD_BTotalsRow( _
                    ByVal SAW As Decimal,  _
                    ByVal SADM As Decimal,  _
                    ByVal SACD As Decimal,  _
                    ByVal SAHD As Decimal,  _
                    ByVal SACM As Decimal,  _
                    ByVal CSAW As Decimal,  _
                    ByVal CSADM As Decimal,  _
                    ByVal CSACD As Decimal,  _
                    ByVal CSAHD As Decimal,  _
                    ByVal CSACM As Decimal,  _
                    ByVal LOC As Decimal,  _
                    ByVal REG As Decimal,  _
                    ByVal OUS As Decimal,  _
                    ByVal CLOC As Decimal,  _
                    ByVal CREG As Decimal,  _
                    ByVal COUS As Decimal) As EOD_BTotalsRow
            Dim rowEOD_BTotalsRow As EOD_BTotalsRow = CType(Me.NewRow,EOD_BTotalsRow)
            Dim columnValuesArray() As Object = New Object() {SAW, SADM, SACD, SAHD, SACM, CSAW, CSADM, CSACD, CSAHD, CSACM, LOC, REG, OUS, CLOC, CREG, COUS}
            rowEOD_BTotalsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOD_BTotalsRow)
            Return rowEOD_BTotalsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOD_BTotalsDataTable = CType(MyBase.Clone,EOD_BTotalsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOD_BTotalsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSAW = MyBase.Columns("SAW")
            Me.columnSADM = MyBase.Columns("SADM")
            Me.columnSACD = MyBase.Columns("SACD")
            Me.columnSAHD = MyBase.Columns("SAHD")
            Me.columnSACM = MyBase.Columns("SACM")
            Me.columnCSAW = MyBase.Columns("CSAW")
            Me.columnCSADM = MyBase.Columns("CSADM")
            Me.columnCSACD = MyBase.Columns("CSACD")
            Me.columnCSAHD = MyBase.Columns("CSAHD")
            Me.columnCSACM = MyBase.Columns("CSACM")
            Me.columnLOC = MyBase.Columns("LOC")
            Me.columnREG = MyBase.Columns("REG")
            Me.columnOUS = MyBase.Columns("OUS")
            Me.columnCLOC = MyBase.Columns("CLOC")
            Me.columnCREG = MyBase.Columns("CREG")
            Me.columnCOUS = MyBase.Columns("COUS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSAW = New Global.System.Data.DataColumn("SAW", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAW)
            Me.columnSADM = New Global.System.Data.DataColumn("SADM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSADM)
            Me.columnSACD = New Global.System.Data.DataColumn("SACD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACD)
            Me.columnSAHD = New Global.System.Data.DataColumn("SAHD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSAHD)
            Me.columnSACM = New Global.System.Data.DataColumn("SACM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSACM)
            Me.columnCSAW = New Global.System.Data.DataColumn("CSAW", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSAW)
            Me.columnCSADM = New Global.System.Data.DataColumn("CSADM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSADM)
            Me.columnCSACD = New Global.System.Data.DataColumn("CSACD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSACD)
            Me.columnCSAHD = New Global.System.Data.DataColumn("CSAHD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSAHD)
            Me.columnCSACM = New Global.System.Data.DataColumn("CSACM", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSACM)
            Me.columnLOC = New Global.System.Data.DataColumn("LOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOC)
            Me.columnREG = New Global.System.Data.DataColumn("REG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREG)
            Me.columnOUS = New Global.System.Data.DataColumn("OUS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOUS)
            Me.columnCLOC = New Global.System.Data.DataColumn("CLOC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLOC)
            Me.columnCREG = New Global.System.Data.DataColumn("CREG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREG)
            Me.columnCOUS = New Global.System.Data.DataColumn("COUS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUS)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOD_BTotalsRow() As EOD_BTotalsRow
            Return CType(Me.NewRow,EOD_BTotalsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOD_BTotalsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOD_BTotalsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOD_BTotalsRowChangedEvent) Is Nothing) Then
                RaiseEvent EOD_BTotalsRowChanged(Me, New EOD_BTotalsRowChangeEvent(CType(e.Row,EOD_BTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOD_BTotalsRowChangingEvent) Is Nothing) Then
                RaiseEvent EOD_BTotalsRowChanging(Me, New EOD_BTotalsRowChangeEvent(CType(e.Row,EOD_BTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOD_BTotalsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOD_BTotalsRowDeleted(Me, New EOD_BTotalsRowChangeEvent(CType(e.Row,EOD_BTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOD_BTotalsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOD_BTotalsRowDeleting(Me, New EOD_BTotalsRowChangeEvent(CType(e.Row,EOD_BTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOD_BTotalsRow(ByVal row As EOD_BTotalsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOD_BTotalsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOD_CDepoDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOD_CDepoRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnCHKAMT As Global.System.Data.DataColumn
        
        Private columnCHKCODE As Global.System.Data.DataColumn
        
        Private columnTRANDATE As Global.System.Data.DataColumn
        
        Private columnCHKNUM As Global.System.Data.DataColumn
        
        Private columnCHKBANK As Global.System.Data.DataColumn
        
        Private columnADD_TIME As Global.System.Data.DataColumn
        
        Private columnUSER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOD_CDepo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKBANKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKBANK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOD_CDepoRow
            Get
                Return CType(Me.Rows(index),EOD_CDepoRow)
            End Get
        End Property
        
        Public Event EOD_CDepoRowChanging As EOD_CDepoRowChangeEventHandler
        
        Public Event EOD_CDepoRowChanged As EOD_CDepoRowChangeEventHandler
        
        Public Event EOD_CDepoRowDeleting As EOD_CDepoRowChangeEventHandler
        
        Public Event EOD_CDepoRowDeleted As EOD_CDepoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOD_CDepoRow(ByVal row As EOD_CDepoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOD_CDepoRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal CHKAMT As Decimal, ByVal CHKCODE As String, ByVal TRANDATE As String, ByVal CHKNUM As String, ByVal CHKBANK As String, ByVal ADD_TIME As String, ByVal USER As String) As EOD_CDepoRow
            Dim rowEOD_CDepoRow As EOD_CDepoRow = CType(Me.NewRow,EOD_CDepoRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, CHKAMT, CHKCODE, TRANDATE, CHKNUM, CHKBANK, ADD_TIME, USER}
            rowEOD_CDepoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOD_CDepoRow)
            Return rowEOD_CDepoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOD_CDepoDataTable = CType(MyBase.Clone,EOD_CDepoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOD_CDepoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnCHKAMT = MyBase.Columns("CHKAMT")
            Me.columnCHKCODE = MyBase.Columns("CHKCODE")
            Me.columnTRANDATE = MyBase.Columns("TRANDATE")
            Me.columnCHKNUM = MyBase.Columns("CHKNUM")
            Me.columnCHKBANK = MyBase.Columns("CHKBANK")
            Me.columnADD_TIME = MyBase.Columns("ADD_TIME")
            Me.columnUSER = MyBase.Columns("USER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnCHKAMT = New Global.System.Data.DataColumn("CHKAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKAMT)
            Me.columnCHKCODE = New Global.System.Data.DataColumn("CHKCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKCODE)
            Me.columnTRANDATE = New Global.System.Data.DataColumn("TRANDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANDATE)
            Me.columnCHKNUM = New Global.System.Data.DataColumn("CHKNUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKNUM)
            Me.columnCHKBANK = New Global.System.Data.DataColumn("CHKBANK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKBANK)
            Me.columnADD_TIME = New Global.System.Data.DataColumn("ADD_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_TIME)
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOD_CDepoRow() As EOD_CDepoRow
            Return CType(Me.NewRow,EOD_CDepoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOD_CDepoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOD_CDepoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOD_CDepoRowChangedEvent) Is Nothing) Then
                RaiseEvent EOD_CDepoRowChanged(Me, New EOD_CDepoRowChangeEvent(CType(e.Row,EOD_CDepoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOD_CDepoRowChangingEvent) Is Nothing) Then
                RaiseEvent EOD_CDepoRowChanging(Me, New EOD_CDepoRowChangeEvent(CType(e.Row,EOD_CDepoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOD_CDepoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOD_CDepoRowDeleted(Me, New EOD_CDepoRowChangeEvent(CType(e.Row,EOD_CDepoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOD_CDepoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOD_CDepoRowDeleting(Me, New EOD_CDepoRowChangeEvent(CType(e.Row,EOD_CDepoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOD_CDepoRow(ByVal row As EOD_CDepoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOD_CDepoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOD_RItemsDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOD_RItemsRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnCHKAMT As Global.System.Data.DataColumn
        
        Private columnCHKCODE As Global.System.Data.DataColumn
        
        Private columnTRANDATE As Global.System.Data.DataColumn
        
        Private columnCHKNUM As Global.System.Data.DataColumn
        
        Private columnADD_TIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOD_RItems"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKAMTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKAMT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOD_RItemsRow
            Get
                Return CType(Me.Rows(index),EOD_RItemsRow)
            End Get
        End Property
        
        Public Event EOD_RItemsRowChanging As EOD_RItemsRowChangeEventHandler
        
        Public Event EOD_RItemsRowChanged As EOD_RItemsRowChangeEventHandler
        
        Public Event EOD_RItemsRowDeleting As EOD_RItemsRowChangeEventHandler
        
        Public Event EOD_RItemsRowDeleted As EOD_RItemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOD_RItemsRow(ByVal row As EOD_RItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOD_RItemsRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal CHKAMT As Decimal, ByVal CHKCODE As String, ByVal TRANDATE As String, ByVal CHKNUM As String, ByVal ADD_TIME As String) As EOD_RItemsRow
            Dim rowEOD_RItemsRow As EOD_RItemsRow = CType(Me.NewRow,EOD_RItemsRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, CHKAMT, CHKCODE, TRANDATE, CHKNUM, ADD_TIME}
            rowEOD_RItemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOD_RItemsRow)
            Return rowEOD_RItemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOD_RItemsDataTable = CType(MyBase.Clone,EOD_RItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOD_RItemsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnCHKAMT = MyBase.Columns("CHKAMT")
            Me.columnCHKCODE = MyBase.Columns("CHKCODE")
            Me.columnTRANDATE = MyBase.Columns("TRANDATE")
            Me.columnCHKNUM = MyBase.Columns("CHKNUM")
            Me.columnADD_TIME = MyBase.Columns("ADD_TIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnCHKAMT = New Global.System.Data.DataColumn("CHKAMT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKAMT)
            Me.columnCHKCODE = New Global.System.Data.DataColumn("CHKCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKCODE)
            Me.columnTRANDATE = New Global.System.Data.DataColumn("TRANDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANDATE)
            Me.columnCHKNUM = New Global.System.Data.DataColumn("CHKNUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKNUM)
            Me.columnADD_TIME = New Global.System.Data.DataColumn("ADD_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_TIME)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOD_RItemsRow() As EOD_RItemsRow
            Return CType(Me.NewRow,EOD_RItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOD_RItemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOD_RItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOD_RItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent EOD_RItemsRowChanged(Me, New EOD_RItemsRowChangeEvent(CType(e.Row,EOD_RItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOD_RItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent EOD_RItemsRowChanging(Me, New EOD_RItemsRowChangeEvent(CType(e.Row,EOD_RItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOD_RItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOD_RItemsRowDeleted(Me, New EOD_RItemsRowChangeEvent(CType(e.Row,EOD_RItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOD_RItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOD_RItemsRowDeleting(Me, New EOD_RItemsRowChangeEvent(CType(e.Row,EOD_RItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOD_RItemsRow(ByVal row As EOD_RItemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOD_RItemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOD_ECorrectDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOD_ECorrectRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnTRANDEB As Global.System.Data.DataColumn
        
        Private columnTRANCRE As Global.System.Data.DataColumn
        
        Private columnTRANCODE As Global.System.Data.DataColumn
        
        Private columnUSER As Global.System.Data.DataColumn
        
        Private columnTRANSEQ As Global.System.Data.DataColumn
        
        Private columnADD_TIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOD_ECorrect"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANDEBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANDEB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANCREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANCRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANSEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOD_ECorrectRow
            Get
                Return CType(Me.Rows(index),EOD_ECorrectRow)
            End Get
        End Property
        
        Public Event EOD_ECorrectRowChanging As EOD_ECorrectRowChangeEventHandler
        
        Public Event EOD_ECorrectRowChanged As EOD_ECorrectRowChangeEventHandler
        
        Public Event EOD_ECorrectRowDeleting As EOD_ECorrectRowChangeEventHandler
        
        Public Event EOD_ECorrectRowDeleted As EOD_ECorrectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOD_ECorrectRow(ByVal row As EOD_ECorrectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOD_ECorrectRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal TRANDEB As Decimal, ByVal TRANCRE As Decimal, ByVal TRANCODE As String, ByVal USER As String, ByVal TRANSEQ As String, ByVal ADD_TIME As String) As EOD_ECorrectRow
            Dim rowEOD_ECorrectRow As EOD_ECorrectRow = CType(Me.NewRow,EOD_ECorrectRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, TRANDEB, TRANCRE, TRANCODE, USER, TRANSEQ, ADD_TIME}
            rowEOD_ECorrectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOD_ECorrectRow)
            Return rowEOD_ECorrectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOD_ECorrectDataTable = CType(MyBase.Clone,EOD_ECorrectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOD_ECorrectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnTRANDEB = MyBase.Columns("TRANDEB")
            Me.columnTRANCRE = MyBase.Columns("TRANCRE")
            Me.columnTRANCODE = MyBase.Columns("TRANCODE")
            Me.columnUSER = MyBase.Columns("USER")
            Me.columnTRANSEQ = MyBase.Columns("TRANSEQ")
            Me.columnADD_TIME = MyBase.Columns("ADD_TIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnTRANDEB = New Global.System.Data.DataColumn("TRANDEB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANDEB)
            Me.columnTRANCRE = New Global.System.Data.DataColumn("TRANCRE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANCRE)
            Me.columnTRANCODE = New Global.System.Data.DataColumn("TRANCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANCODE)
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
            Me.columnTRANSEQ = New Global.System.Data.DataColumn("TRANSEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSEQ)
            Me.columnADD_TIME = New Global.System.Data.DataColumn("ADD_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_TIME)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOD_ECorrectRow() As EOD_ECorrectRow
            Return CType(Me.NewRow,EOD_ECorrectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOD_ECorrectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOD_ECorrectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOD_ECorrectRowChangedEvent) Is Nothing) Then
                RaiseEvent EOD_ECorrectRowChanged(Me, New EOD_ECorrectRowChangeEvent(CType(e.Row,EOD_ECorrectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOD_ECorrectRowChangingEvent) Is Nothing) Then
                RaiseEvent EOD_ECorrectRowChanging(Me, New EOD_ECorrectRowChangeEvent(CType(e.Row,EOD_ECorrectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOD_ECorrectRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOD_ECorrectRowDeleted(Me, New EOD_ECorrectRowChangeEvent(CType(e.Row,EOD_ECorrectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOD_ECorrectRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOD_ECorrectRowDeleting(Me, New EOD_ECorrectRowChangeEvent(CType(e.Row,EOD_ECorrectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOD_ECorrectRow(ByVal row As EOD_ECorrectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOD_ECorrectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOD_DCTotalsDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOD_DCTotalsRow)
        
        Private columnCTRLNO As Global.System.Data.DataColumn
        
        Private columnTRANBBAL As Global.System.Data.DataColumn
        
        Private columnTRANDEB As Global.System.Data.DataColumn
        
        Private columnTRANCRE As Global.System.Data.DataColumn
        
        Private columnTRANEBAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOD_DCTotals"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTRLNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTRLNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANBBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANBBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANDEBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANDEB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANCREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANCRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANEBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANEBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOD_DCTotalsRow
            Get
                Return CType(Me.Rows(index),EOD_DCTotalsRow)
            End Get
        End Property
        
        Public Event EOD_DCTotalsRowChanging As EOD_DCTotalsRowChangeEventHandler
        
        Public Event EOD_DCTotalsRowChanged As EOD_DCTotalsRowChangeEventHandler
        
        Public Event EOD_DCTotalsRowDeleting As EOD_DCTotalsRowChangeEventHandler
        
        Public Event EOD_DCTotalsRowDeleted As EOD_DCTotalsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOD_DCTotalsRow(ByVal row As EOD_DCTotalsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOD_DCTotalsRow(ByVal CTRLNO As String, ByVal TRANBBAL As Decimal, ByVal TRANDEB As Decimal, ByVal TRANCRE As Decimal, ByVal TRANEBAL As Decimal) As EOD_DCTotalsRow
            Dim rowEOD_DCTotalsRow As EOD_DCTotalsRow = CType(Me.NewRow,EOD_DCTotalsRow)
            Dim columnValuesArray() As Object = New Object() {CTRLNO, TRANBBAL, TRANDEB, TRANCRE, TRANEBAL}
            rowEOD_DCTotalsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOD_DCTotalsRow)
            Return rowEOD_DCTotalsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOD_DCTotalsDataTable = CType(MyBase.Clone,EOD_DCTotalsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOD_DCTotalsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCTRLNO = MyBase.Columns("CTRLNO")
            Me.columnTRANBBAL = MyBase.Columns("TRANBBAL")
            Me.columnTRANDEB = MyBase.Columns("TRANDEB")
            Me.columnTRANCRE = MyBase.Columns("TRANCRE")
            Me.columnTRANEBAL = MyBase.Columns("TRANEBAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCTRLNO = New Global.System.Data.DataColumn("CTRLNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTRLNO)
            Me.columnTRANBBAL = New Global.System.Data.DataColumn("TRANBBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANBBAL)
            Me.columnTRANDEB = New Global.System.Data.DataColumn("TRANDEB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANDEB)
            Me.columnTRANCRE = New Global.System.Data.DataColumn("TRANCRE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANCRE)
            Me.columnTRANEBAL = New Global.System.Data.DataColumn("TRANEBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANEBAL)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOD_DCTotalsRow() As EOD_DCTotalsRow
            Return CType(Me.NewRow,EOD_DCTotalsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOD_DCTotalsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOD_DCTotalsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOD_DCTotalsRowChangedEvent) Is Nothing) Then
                RaiseEvent EOD_DCTotalsRowChanged(Me, New EOD_DCTotalsRowChangeEvent(CType(e.Row,EOD_DCTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOD_DCTotalsRowChangingEvent) Is Nothing) Then
                RaiseEvent EOD_DCTotalsRowChanging(Me, New EOD_DCTotalsRowChangeEvent(CType(e.Row,EOD_DCTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOD_DCTotalsRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOD_DCTotalsRowDeleted(Me, New EOD_DCTotalsRowChangeEvent(CType(e.Row,EOD_DCTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOD_DCTotalsRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOD_DCTotalsRowDeleting(Me, New EOD_DCTotalsRowChangeEvent(CType(e.Row,EOD_DCTotalsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOD_DCTotalsRow(ByVal row As EOD_DCTotalsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOD_DCTotalsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOD_TListingDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOD_TListingRow)
        
        Private columnACCTNUM As Global.System.Data.DataColumn
        
        Private columnTRANBBAL As Global.System.Data.DataColumn
        
        Private columnTRANDEB As Global.System.Data.DataColumn
        
        Private columnTRANCRE As Global.System.Data.DataColumn
        
        Private columnTRANCODE As Global.System.Data.DataColumn
        
        Private columnTRANEBAL As Global.System.Data.DataColumn
        
        Private columnADD_TIME As Global.System.Data.DataColumn
        
        Private columnCHKNUM As Global.System.Data.DataColumn
        
        Private columnCHKCODE As Global.System.Data.DataColumn
        
        Private columnOVERRIDE As Global.System.Data.DataColumn
        
        Private columnUSER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOD_TListing"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANBBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANBBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANDEBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANDEB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANCREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANCRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANEBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANEBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHKCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHKCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OVERRIDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOVERRIDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOD_TListingRow
            Get
                Return CType(Me.Rows(index),EOD_TListingRow)
            End Get
        End Property
        
        Public Event EOD_TListingRowChanging As EOD_TListingRowChangeEventHandler
        
        Public Event EOD_TListingRowChanged As EOD_TListingRowChangeEventHandler
        
        Public Event EOD_TListingRowDeleting As EOD_TListingRowChangeEventHandler
        
        Public Event EOD_TListingRowDeleted As EOD_TListingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOD_TListingRow(ByVal row As EOD_TListingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOD_TListingRow(ByVal ACCTNUM As String, ByVal TRANBBAL As Decimal, ByVal TRANDEB As Decimal, ByVal TRANCRE As Decimal, ByVal TRANCODE As String, ByVal TRANEBAL As Decimal, ByVal ADD_TIME As String, ByVal CHKNUM As String, ByVal CHKCODE As String, ByVal OVERRIDE As String, ByVal USER As String) As EOD_TListingRow
            Dim rowEOD_TListingRow As EOD_TListingRow = CType(Me.NewRow,EOD_TListingRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNUM, TRANBBAL, TRANDEB, TRANCRE, TRANCODE, TRANEBAL, ADD_TIME, CHKNUM, CHKCODE, OVERRIDE, USER}
            rowEOD_TListingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOD_TListingRow)
            Return rowEOD_TListingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOD_TListingDataTable = CType(MyBase.Clone,EOD_TListingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOD_TListingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNUM = MyBase.Columns("ACCTNUM")
            Me.columnTRANBBAL = MyBase.Columns("TRANBBAL")
            Me.columnTRANDEB = MyBase.Columns("TRANDEB")
            Me.columnTRANCRE = MyBase.Columns("TRANCRE")
            Me.columnTRANCODE = MyBase.Columns("TRANCODE")
            Me.columnTRANEBAL = MyBase.Columns("TRANEBAL")
            Me.columnADD_TIME = MyBase.Columns("ADD_TIME")
            Me.columnCHKNUM = MyBase.Columns("CHKNUM")
            Me.columnCHKCODE = MyBase.Columns("CHKCODE")
            Me.columnOVERRIDE = MyBase.Columns("OVERRIDE")
            Me.columnUSER = MyBase.Columns("USER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNUM = New Global.System.Data.DataColumn("ACCTNUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNUM)
            Me.columnTRANBBAL = New Global.System.Data.DataColumn("TRANBBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANBBAL)
            Me.columnTRANDEB = New Global.System.Data.DataColumn("TRANDEB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANDEB)
            Me.columnTRANCRE = New Global.System.Data.DataColumn("TRANCRE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANCRE)
            Me.columnTRANCODE = New Global.System.Data.DataColumn("TRANCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANCODE)
            Me.columnTRANEBAL = New Global.System.Data.DataColumn("TRANEBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANEBAL)
            Me.columnADD_TIME = New Global.System.Data.DataColumn("ADD_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_TIME)
            Me.columnCHKNUM = New Global.System.Data.DataColumn("CHKNUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKNUM)
            Me.columnCHKCODE = New Global.System.Data.DataColumn("CHKCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHKCODE)
            Me.columnOVERRIDE = New Global.System.Data.DataColumn("OVERRIDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOVERRIDE)
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOD_TListingRow() As EOD_TListingRow
            Return CType(Me.NewRow,EOD_TListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOD_TListingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOD_TListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOD_TListingRowChangedEvent) Is Nothing) Then
                RaiseEvent EOD_TListingRowChanged(Me, New EOD_TListingRowChangeEvent(CType(e.Row,EOD_TListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOD_TListingRowChangingEvent) Is Nothing) Then
                RaiseEvent EOD_TListingRowChanging(Me, New EOD_TListingRowChangeEvent(CType(e.Row,EOD_TListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOD_TListingRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOD_TListingRowDeleted(Me, New EOD_TListingRowChangeEvent(CType(e.Row,EOD_TListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOD_TListingRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOD_TListingRowDeleting(Me, New EOD_TListingRowChangeEvent(CType(e.Row,EOD_TListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOD_TListingRow(ByVal row As EOD_TListingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOD_TListingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOD_RegisterDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOD_RegisterRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnAMOUNT As Global.System.Data.DataColumn
        
        Private columnADD_TIME As Global.System.Data.DataColumn
        
        Private columnuser As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOD_Register"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOD_RegisterRow
            Get
                Return CType(Me.Rows(index),EOD_RegisterRow)
            End Get
        End Property
        
        Public Event EOD_RegisterRowChanging As EOD_RegisterRowChangeEventHandler
        
        Public Event EOD_RegisterRowChanged As EOD_RegisterRowChangeEventHandler
        
        Public Event EOD_RegisterRowDeleting As EOD_RegisterRowChangeEventHandler
        
        Public Event EOD_RegisterRowDeleted As EOD_RegisterRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOD_RegisterRow(ByVal row As EOD_RegisterRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOD_RegisterRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal AMOUNT As Decimal, ByVal ADD_TIME As String, ByVal user As String) As EOD_RegisterRow
            Dim rowEOD_RegisterRow As EOD_RegisterRow = CType(Me.NewRow,EOD_RegisterRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, AMOUNT, ADD_TIME, user}
            rowEOD_RegisterRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOD_RegisterRow)
            Return rowEOD_RegisterRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOD_RegisterDataTable = CType(MyBase.Clone,EOD_RegisterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOD_RegisterDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnAMOUNT = MyBase.Columns("AMOUNT")
            Me.columnADD_TIME = MyBase.Columns("ADD_TIME")
            Me.columnuser = MyBase.Columns("USER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnAMOUNT = New Global.System.Data.DataColumn("AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMOUNT)
            Me.columnADD_TIME = New Global.System.Data.DataColumn("ADD_TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_TIME)
            Me.columnuser = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnuser.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "user")
            Me.columnuser.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "userColumn")
            Me.columnuser.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnuser")
            Me.columnuser.ExtendedProperties.Add("Generator_UserColumnName", "USER")
            MyBase.Columns.Add(Me.columnuser)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOD_RegisterRow() As EOD_RegisterRow
            Return CType(Me.NewRow,EOD_RegisterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOD_RegisterRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOD_RegisterRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOD_RegisterRowChangedEvent) Is Nothing) Then
                RaiseEvent EOD_RegisterRowChanged(Me, New EOD_RegisterRowChangeEvent(CType(e.Row,EOD_RegisterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOD_RegisterRowChangingEvent) Is Nothing) Then
                RaiseEvent EOD_RegisterRowChanging(Me, New EOD_RegisterRowChangeEvent(CType(e.Row,EOD_RegisterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOD_RegisterRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOD_RegisterRowDeleted(Me, New EOD_RegisterRowChangeEvent(CType(e.Row,EOD_RegisterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOD_RegisterRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOD_RegisterRowDeleting(Me, New EOD_RegisterRowChangeEvent(CType(e.Row,EOD_RegisterRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOD_RegisterRow(ByVal row As EOD_RegisterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOD_RegisterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Master_ProoflistDataTable
        Inherits Global.System.Data.TypedTableBase(Of Master_ProoflistRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSTAT As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnACCTADDR1 As Global.System.Data.DataColumn
        
        Private columnACCTNAME As Global.System.Data.DataColumn
        
        Private columnADD_DATE As Global.System.Data.DataColumn
        
        Private columnLTRANDATE As Global.System.Data.DataColumn
        
        Private columnACCTOBAL As Global.System.Data.DataColumn
        
        Private columnACCTFLOATS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Master_Prooflist"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSTATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSTAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTADDR1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTADDR1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LTRANDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLTRANDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTOBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTOBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTFLOATSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTFLOATS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Master_ProoflistRow
            Get
                Return CType(Me.Rows(index),Master_ProoflistRow)
            End Get
        End Property
        
        Public Event Master_ProoflistRowChanging As Master_ProoflistRowChangeEventHandler
        
        Public Event Master_ProoflistRowChanged As Master_ProoflistRowChangeEventHandler
        
        Public Event Master_ProoflistRowDeleting As Master_ProoflistRowChangeEventHandler
        
        Public Event Master_ProoflistRowDeleted As Master_ProoflistRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMaster_ProoflistRow(ByVal row As Master_ProoflistRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMaster_ProoflistRow(ByVal ACCTNO As String, ByVal ACCTSTAT As String, ByVal ACCTSNAME As String, ByVal ACCTADDR1 As String, ByVal ACCTNAME As String, ByVal ADD_DATE As String, ByVal LTRANDATE As String, ByVal ACCTOBAL As Decimal, ByVal ACCTFLOATS As Decimal) As Master_ProoflistRow
            Dim rowMaster_ProoflistRow As Master_ProoflistRow = CType(Me.NewRow,Master_ProoflistRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSTAT, ACCTSNAME, ACCTADDR1, ACCTNAME, ADD_DATE, LTRANDATE, ACCTOBAL, ACCTFLOATS}
            rowMaster_ProoflistRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMaster_ProoflistRow)
            Return rowMaster_ProoflistRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Master_ProoflistDataTable = CType(MyBase.Clone,Master_ProoflistDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Master_ProoflistDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSTAT = MyBase.Columns("ACCTSTAT")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnACCTADDR1 = MyBase.Columns("ACCTADDR1")
            Me.columnACCTNAME = MyBase.Columns("ACCTNAME")
            Me.columnADD_DATE = MyBase.Columns("ADD_DATE")
            Me.columnLTRANDATE = MyBase.Columns("LTRANDATE")
            Me.columnACCTOBAL = MyBase.Columns("ACCTOBAL")
            Me.columnACCTFLOATS = MyBase.Columns("ACCTFLOATS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSTAT = New Global.System.Data.DataColumn("ACCTSTAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSTAT)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnACCTADDR1 = New Global.System.Data.DataColumn("ACCTADDR1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTADDR1)
            Me.columnACCTNAME = New Global.System.Data.DataColumn("ACCTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNAME)
            Me.columnADD_DATE = New Global.System.Data.DataColumn("ADD_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_DATE)
            Me.columnLTRANDATE = New Global.System.Data.DataColumn("LTRANDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLTRANDATE)
            Me.columnACCTOBAL = New Global.System.Data.DataColumn("ACCTOBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTOBAL)
            Me.columnACCTFLOATS = New Global.System.Data.DataColumn("ACCTFLOATS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTFLOATS)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMaster_ProoflistRow() As Master_ProoflistRow
            Return CType(Me.NewRow,Master_ProoflistRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Master_ProoflistRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Master_ProoflistRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Master_ProoflistRowChangedEvent) Is Nothing) Then
                RaiseEvent Master_ProoflistRowChanged(Me, New Master_ProoflistRowChangeEvent(CType(e.Row,Master_ProoflistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Master_ProoflistRowChangingEvent) Is Nothing) Then
                RaiseEvent Master_ProoflistRowChanging(Me, New Master_ProoflistRowChangeEvent(CType(e.Row,Master_ProoflistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Master_ProoflistRowDeletedEvent) Is Nothing) Then
                RaiseEvent Master_ProoflistRowDeleted(Me, New Master_ProoflistRowChangeEvent(CType(e.Row,Master_ProoflistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Master_ProoflistRowDeletingEvent) Is Nothing) Then
                RaiseEvent Master_ProoflistRowDeleting(Me, New Master_ProoflistRowChangeEvent(CType(e.Row,Master_ProoflistRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMaster_ProoflistRow(ByVal row As Master_ProoflistRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Master_ProoflistDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Activity_LogDataTable
        Inherits Global.System.Data.TypedTableBase(Of Activity_LogRow)
        
        Private columnADATE As Global.System.Data.DataColumn
        
        Private columnATIME As Global.System.Data.DataColumn
        
        Private columnAUSER As Global.System.Data.DataColumn
        
        Private columnAOVER As Global.System.Data.DataColumn
        
        Private columnAACTI As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Activity_Log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUSERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AOVERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAOVER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AACTIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAACTI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Activity_LogRow
            Get
                Return CType(Me.Rows(index),Activity_LogRow)
            End Get
        End Property
        
        Public Event Activity_LogRowChanging As Activity_LogRowChangeEventHandler
        
        Public Event Activity_LogRowChanged As Activity_LogRowChangeEventHandler
        
        Public Event Activity_LogRowDeleting As Activity_LogRowChangeEventHandler
        
        Public Event Activity_LogRowDeleted As Activity_LogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddActivity_LogRow(ByVal row As Activity_LogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddActivity_LogRow(ByVal ADATE As String, ByVal ATIME As String, ByVal AUSER As String, ByVal AOVER As String, ByVal AACTI As String) As Activity_LogRow
            Dim rowActivity_LogRow As Activity_LogRow = CType(Me.NewRow,Activity_LogRow)
            Dim columnValuesArray() As Object = New Object() {ADATE, ATIME, AUSER, AOVER, AACTI}
            rowActivity_LogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowActivity_LogRow)
            Return rowActivity_LogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Activity_LogDataTable = CType(MyBase.Clone,Activity_LogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Activity_LogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnADATE = MyBase.Columns("ADATE")
            Me.columnATIME = MyBase.Columns("ATIME")
            Me.columnAUSER = MyBase.Columns("AUSER")
            Me.columnAOVER = MyBase.Columns("AOVER")
            Me.columnAACTI = MyBase.Columns("AACTI")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnADATE = New Global.System.Data.DataColumn("ADATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADATE)
            Me.columnATIME = New Global.System.Data.DataColumn("ATIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATIME)
            Me.columnAUSER = New Global.System.Data.DataColumn("AUSER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUSER)
            Me.columnAOVER = New Global.System.Data.DataColumn("AOVER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAOVER)
            Me.columnAACTI = New Global.System.Data.DataColumn("AACTI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAACTI)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewActivity_LogRow() As Activity_LogRow
            Return CType(Me.NewRow,Activity_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Activity_LogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Activity_LogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Activity_LogRowChangedEvent) Is Nothing) Then
                RaiseEvent Activity_LogRowChanged(Me, New Activity_LogRowChangeEvent(CType(e.Row,Activity_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Activity_LogRowChangingEvent) Is Nothing) Then
                RaiseEvent Activity_LogRowChanging(Me, New Activity_LogRowChangeEvent(CType(e.Row,Activity_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Activity_LogRowDeletedEvent) Is Nothing) Then
                RaiseEvent Activity_LogRowDeleted(Me, New Activity_LogRowChangeEvent(CType(e.Row,Activity_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Activity_LogRowDeletingEvent) Is Nothing) Then
                RaiseEvent Activity_LogRowDeleting(Me, New Activity_LogRowChangeEvent(CType(e.Row,Activity_LogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveActivity_LogRow(ByVal row As Activity_LogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Activity_LogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Mem_APaymentDataTable
        Inherits Global.System.Data.TypedTableBase(Of Mem_APaymentRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnKBCI_NO As Global.System.Data.DataColumn
        
        Private columnPN_NO As Global.System.Data.DataColumn
        
        Private columnLOAN_TYPE As Global.System.Data.DataColumn
        
        Private columnACCTNAME As Global.System.Data.DataColumn
        
        Private columnAMOUNT As Global.System.Data.DataColumn
        
        Private columnADD_DATE As Global.System.Data.DataColumn
        
        Private columnREMARKS As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnEXSEQ As Global.System.Data.DataColumn
        
        Private columnEXTIME As Global.System.Data.DataColumn
        
        Private columnEXBBAL As Global.System.Data.DataColumn
        
        Private columnEXEBAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Mem_APayment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KBCI_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKBCI_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PN_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPN_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOAN_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOAN_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMARKSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXSEQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSEQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXBBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXBBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXEBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXEBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Mem_APaymentRow
            Get
                Return CType(Me.Rows(index),Mem_APaymentRow)
            End Get
        End Property
        
        Public Event Mem_APaymentRowChanging As Mem_APaymentRowChangeEventHandler
        
        Public Event Mem_APaymentRowChanged As Mem_APaymentRowChangeEventHandler
        
        Public Event Mem_APaymentRowDeleting As Mem_APaymentRowChangeEventHandler
        
        Public Event Mem_APaymentRowDeleted As Mem_APaymentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMem_APaymentRow(ByVal row As Mem_APaymentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMem_APaymentRow(ByVal ACCTNO As String, ByVal KBCI_NO As String, ByVal PN_NO As String, ByVal LOAN_TYPE As String, ByVal ACCTNAME As String, ByVal AMOUNT As Decimal, ByVal ADD_DATE As String, ByVal REMARKS As String, ByVal STATUS As String, ByVal EXSEQ As String, ByVal EXTIME As String, ByVal EXBBAL As Decimal, ByVal EXEBAL As Decimal) As Mem_APaymentRow
            Dim rowMem_APaymentRow As Mem_APaymentRow = CType(Me.NewRow,Mem_APaymentRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, KBCI_NO, PN_NO, LOAN_TYPE, ACCTNAME, AMOUNT, ADD_DATE, REMARKS, STATUS, EXSEQ, EXTIME, EXBBAL, EXEBAL}
            rowMem_APaymentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMem_APaymentRow)
            Return rowMem_APaymentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Mem_APaymentDataTable = CType(MyBase.Clone,Mem_APaymentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Mem_APaymentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnKBCI_NO = MyBase.Columns("KBCI_NO")
            Me.columnPN_NO = MyBase.Columns("PN_NO")
            Me.columnLOAN_TYPE = MyBase.Columns("LOAN_TYPE")
            Me.columnACCTNAME = MyBase.Columns("ACCTNAME")
            Me.columnAMOUNT = MyBase.Columns("AMOUNT")
            Me.columnADD_DATE = MyBase.Columns("ADD_DATE")
            Me.columnREMARKS = MyBase.Columns("REMARKS")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnEXSEQ = MyBase.Columns("EXSEQ")
            Me.columnEXTIME = MyBase.Columns("EXTIME")
            Me.columnEXBBAL = MyBase.Columns("EXBBAL")
            Me.columnEXEBAL = MyBase.Columns("EXEBAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnKBCI_NO = New Global.System.Data.DataColumn("KBCI_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKBCI_NO)
            Me.columnPN_NO = New Global.System.Data.DataColumn("PN_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPN_NO)
            Me.columnLOAN_TYPE = New Global.System.Data.DataColumn("LOAN_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOAN_TYPE)
            Me.columnACCTNAME = New Global.System.Data.DataColumn("ACCTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNAME)
            Me.columnAMOUNT = New Global.System.Data.DataColumn("AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMOUNT)
            Me.columnADD_DATE = New Global.System.Data.DataColumn("ADD_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD_DATE)
            Me.columnREMARKS = New Global.System.Data.DataColumn("REMARKS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMARKS)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnEXSEQ = New Global.System.Data.DataColumn("EXSEQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSEQ)
            Me.columnEXTIME = New Global.System.Data.DataColumn("EXTIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTIME)
            Me.columnEXBBAL = New Global.System.Data.DataColumn("EXBBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXBBAL)
            Me.columnEXEBAL = New Global.System.Data.DataColumn("EXEBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXEBAL)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMem_APaymentRow() As Mem_APaymentRow
            Return CType(Me.NewRow,Mem_APaymentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Mem_APaymentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Mem_APaymentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Mem_APaymentRowChangedEvent) Is Nothing) Then
                RaiseEvent Mem_APaymentRowChanged(Me, New Mem_APaymentRowChangeEvent(CType(e.Row,Mem_APaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Mem_APaymentRowChangingEvent) Is Nothing) Then
                RaiseEvent Mem_APaymentRowChanging(Me, New Mem_APaymentRowChangeEvent(CType(e.Row,Mem_APaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Mem_APaymentRowDeletedEvent) Is Nothing) Then
                RaiseEvent Mem_APaymentRowDeleted(Me, New Mem_APaymentRowChangeEvent(CType(e.Row,Mem_APaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Mem_APaymentRowDeletingEvent) Is Nothing) Then
                RaiseEvent Mem_APaymentRowDeleting(Me, New Mem_APaymentRowChangeEvent(CType(e.Row,Mem_APaymentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMem_APaymentRow(ByVal row As Mem_APaymentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Mem_APaymentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EOM_DormancyDataTable
        Inherits Global.System.Data.TypedTableBase(Of EOM_DormancyRow)
        
        Private columnACCTNO As Global.System.Data.DataColumn
        
        Private columnACCTSNAME As Global.System.Data.DataColumn
        
        Private columnACCTEBAL As Global.System.Data.DataColumn
        
        Private columnDORMANCYFEE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EOM_Dormancy"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCTEBALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCTEBAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DORMANCYFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDORMANCYFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EOM_DormancyRow
            Get
                Return CType(Me.Rows(index),EOM_DormancyRow)
            End Get
        End Property
        
        Public Event EOM_DormancyRowChanging As EOM_DormancyRowChangeEventHandler
        
        Public Event EOM_DormancyRowChanged As EOM_DormancyRowChangeEventHandler
        
        Public Event EOM_DormancyRowDeleting As EOM_DormancyRowChangeEventHandler
        
        Public Event EOM_DormancyRowDeleted As EOM_DormancyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEOM_DormancyRow(ByVal row As EOM_DormancyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEOM_DormancyRow(ByVal ACCTNO As String, ByVal ACCTSNAME As String, ByVal ACCTEBAL As Decimal, ByVal DORMANCYFEE As Decimal) As EOM_DormancyRow
            Dim rowEOM_DormancyRow As EOM_DormancyRow = CType(Me.NewRow,EOM_DormancyRow)
            Dim columnValuesArray() As Object = New Object() {ACCTNO, ACCTSNAME, ACCTEBAL, DORMANCYFEE}
            rowEOM_DormancyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEOM_DormancyRow)
            Return rowEOM_DormancyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EOM_DormancyDataTable = CType(MyBase.Clone,EOM_DormancyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EOM_DormancyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCTNO = MyBase.Columns("ACCTNO")
            Me.columnACCTSNAME = MyBase.Columns("ACCTSNAME")
            Me.columnACCTEBAL = MyBase.Columns("ACCTEBAL")
            Me.columnDORMANCYFEE = MyBase.Columns("DORMANCYFEE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCTNO = New Global.System.Data.DataColumn("ACCTNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTNO)
            Me.columnACCTSNAME = New Global.System.Data.DataColumn("ACCTSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTSNAME)
            Me.columnACCTEBAL = New Global.System.Data.DataColumn("ACCTEBAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCTEBAL)
            Me.columnDORMANCYFEE = New Global.System.Data.DataColumn("DORMANCYFEE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDORMANCYFEE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEOM_DormancyRow() As EOM_DormancyRow
            Return CType(Me.NewRow,EOM_DormancyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EOM_DormancyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EOM_DormancyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EOM_DormancyRowChangedEvent) Is Nothing) Then
                RaiseEvent EOM_DormancyRowChanged(Me, New EOM_DormancyRowChangeEvent(CType(e.Row,EOM_DormancyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EOM_DormancyRowChangingEvent) Is Nothing) Then
                RaiseEvent EOM_DormancyRowChanging(Me, New EOM_DormancyRowChangeEvent(CType(e.Row,EOM_DormancyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EOM_DormancyRowDeletedEvent) Is Nothing) Then
                RaiseEvent EOM_DormancyRowDeleted(Me, New EOM_DormancyRowChangeEvent(CType(e.Row,EOM_DormancyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EOM_DormancyRowDeletingEvent) Is Nothing) Then
                RaiseEvent EOM_DormancyRowDeleting(Me, New EOM_DormancyRowChangeEvent(CType(e.Row,EOM_DormancyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEOM_DormancyRow(ByVal row As EOM_DormancyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsSD_Main = New dtsSD_Main
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EOM_DormancyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Mem_LedgerRow
        Inherits Global.System.Data.DataRow
        
        Private tableMem_Ledger As Mem_LedgerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMem_Ledger = CType(Me.Table,Mem_LedgerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRAN_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.TRAN_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRAN_DATE' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.TRAN_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIME' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.CODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COD' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.CODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BANK() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.BANKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BANK' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.BANKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHECK_NUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.CHECK_NUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHECK_NUM' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.CHECK_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEBIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.DEBITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEBIT' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.DEBITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREDIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.CREDITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREDIT' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.CREDITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BALANCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_Ledger.BALANCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BALANCE' in table 'Mem_Ledger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Ledger.BALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRAN_DATENull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.TRAN_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRAN_DATENull()
            Me(Me.tableMem_Ledger.TRAN_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIMENull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIMENull()
            Me(Me.tableMem_Ledger.TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODNull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.CODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODNull()
            Me(Me.tableMem_Ledger.CODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBANKNull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.BANKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBANKNull()
            Me(Me.tableMem_Ledger.BANKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHECK_NUMNull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.CHECK_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHECK_NUMNull()
            Me(Me.tableMem_Ledger.CHECK_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEBITNull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.DEBITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEBITNull()
            Me(Me.tableMem_Ledger.DEBITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREDITNull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.CREDITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREDITNull()
            Me(Me.tableMem_Ledger.CREDITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBALANCENull() As Boolean
            Return Me.IsNull(Me.tableMem_Ledger.BALANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBALANCENull()
            Me(Me.tableMem_Ledger.BALANCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Mem_PayrollRow
        Inherits Global.System.Data.DataRow
        
        Private tableMem_Payroll As Mem_PayrollDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMem_Payroll = CType(Me.Table,Mem_PayrollDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Payroll.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'Mem_Payroll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Payroll.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Payroll.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'Mem_Payroll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Payroll.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SDBBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_Payroll.SDBBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SDBBAL' in table 'Mem_Payroll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Payroll.SDBBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_Payroll.PAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAMT' in table 'Mem_Payroll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Payroll.PAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SDEBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_Payroll.SDEBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SDEBAL' in table 'Mem_Payroll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Payroll.SDEBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SDSEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Payroll.SDSEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SDSEQ' in table 'Mem_Payroll' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Payroll.SDSEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableMem_Payroll.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableMem_Payroll.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableMem_Payroll.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableMem_Payroll.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSDBBALNull() As Boolean
            Return Me.IsNull(Me.tableMem_Payroll.SDBBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSDBBALNull()
            Me(Me.tableMem_Payroll.SDBBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAMTNull() As Boolean
            Return Me.IsNull(Me.tableMem_Payroll.PAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAMTNull()
            Me(Me.tableMem_Payroll.PAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSDEBALNull() As Boolean
            Return Me.IsNull(Me.tableMem_Payroll.SDEBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSDEBALNull()
            Me(Me.tableMem_Payroll.SDEBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSDSEQNull() As Boolean
            Return Me.IsNull(Me.tableMem_Payroll.SDSEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSDSEQNull()
            Me(Me.tableMem_Payroll.SDSEQColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Mem_LoanholdRow
        Inherits Global.System.Data.DataRow
        
        Private tableMem_Loanhold As Mem_LoanholdDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMem_Loanhold = CType(Me.Table,Mem_LoanholdDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.ACCTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNAME' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.ACCTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOLDCD() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.HOLDCDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOLDCD' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.HOLDCDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOLDTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.HOLDTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOLDTYPE' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.HOLDTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOLDAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.HOLDAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOLDAMT' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.HOLDAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOLDDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.HOLDDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOLDDATE' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.HOLDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOLDUSER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.HOLDUSERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOLDUSER' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.HOLDUSERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HOLDRMKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.HOLDRMKSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HOLDRMKS' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.HOLDRMKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSTSTAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.POSTSTATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSTSTAT' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.POSTSTATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSTDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.POSTDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSTDATE' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.POSTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSTUSER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_Loanhold.POSTUSERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSTUSER' in table 'Mem_Loanhold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_Loanhold.POSTUSERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableMem_Loanhold.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNAMENull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.ACCTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNAMENull()
            Me(Me.tableMem_Loanhold.ACCTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOLDCDNull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.HOLDCDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOLDCDNull()
            Me(Me.tableMem_Loanhold.HOLDCDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOLDTYPENull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.HOLDTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOLDTYPENull()
            Me(Me.tableMem_Loanhold.HOLDTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOLDAMTNull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.HOLDAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOLDAMTNull()
            Me(Me.tableMem_Loanhold.HOLDAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOLDDATENull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.HOLDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOLDDATENull()
            Me(Me.tableMem_Loanhold.HOLDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOLDUSERNull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.HOLDUSERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOLDUSERNull()
            Me(Me.tableMem_Loanhold.HOLDUSERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHOLDRMKSNull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.HOLDRMKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHOLDRMKSNull()
            Me(Me.tableMem_Loanhold.HOLDRMKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSTSTATNull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.POSTSTATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSTSTATNull()
            Me(Me.tableMem_Loanhold.POSTSTATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSTDATENull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.POSTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSTDATENull()
            Me(Me.tableMem_Loanhold.POSTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSTUSERNull() As Boolean
            Return Me.IsNull(Me.tableMem_Loanhold.POSTUSERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSTUSERNull()
            Me(Me.tableMem_Loanhold.POSTUSERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Teller__TranRow
        Inherits Global.System.Data.DataRow
        
        Private tableTeller__Tran As Teller__TranDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTeller__Tran = CType(Me.Table,Teller__TranDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.SPUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPUSERNAME' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.SPUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASHB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CASHBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASHB' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CASHBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCIB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.COCIBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COCIB' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.COCIBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDMREQ() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.ADDMREQColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDMREQ' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.ADDMREQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASHSAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CASHSAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASHSAV' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CASHSAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASHOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CASHORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASHOR' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CASHORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDCHECKS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.ADDCHECKSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDCHECKS' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.ADDCHECKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDLTD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.ADDLTDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDLTD' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.ADDLTDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTFNAME1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTFNAME1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTFNAME1' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTFNAME1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTFAMT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTFAMT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTFAMT1' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTFAMT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTFNAME2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTFNAME2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTFNAME2' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTFNAME2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTFAMT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTFAMT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTFAMT2' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTFAMT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTFNAME3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTFNAME3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTFNAME3' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTFNAME3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTFAMT3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTFAMT3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTFAMT3' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTFAMT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDCASH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.ADDCASHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDCASH' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.ADDCASHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CRSAV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CRSAVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CRSAV' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CRSAVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CRORO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CROROColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CRORO' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CROROColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CRACC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CRACCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CRACC' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CRACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CRCR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CRCRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CRCR' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CRCRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADDTOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.ADDTOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDTOTAL' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.ADDTOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.DIBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIB' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.DIBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.REFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REF' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.REFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _WITH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.WITHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WITH' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.WITHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKENC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CHKENCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKENC' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CHKENCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COCI() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.COCIColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COCI' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.COCIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKDEP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CHKDEPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKDEP' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CHKDEPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.EMERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMER' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.EMERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTTNAME1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTTNAME1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTTNAME1' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTTNAME1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTTAMT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTTAMT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTTAMT1' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTTAMT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTTNAME2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTTNAME2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTTNAME2' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTTNAME2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTTAMT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTTAMT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTTAMT2' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTTAMT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTTNAME3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTTNAME3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTTNAME3' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTTNAME3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTTAMT3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTTAMT3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTTAMT3' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTTAMT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTDISB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.TOTDISBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTDISB' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.TOTDISBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CBALEND() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CBALENDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CBALEND' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CBALENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTTCEND() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.CTTCENDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTTCEND' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.CTTCENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OVER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.OVERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OVER' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.OVERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_1000() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_1000Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_1000' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_1000Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_500() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_500Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_500' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_500Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_200() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_200Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_200' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_200Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_100() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_100Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_100' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_100Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_50() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_50Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_50' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_50Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_20() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_20Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_20' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_10() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_10Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_10' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_5() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_5Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_5' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_1() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_1Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_1' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_P50() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_P50Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_P50' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_P50Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_P25() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_P25Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_P25' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_P25Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_P10() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_P10Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_P10' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_P10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_P05() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_P05Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_P05' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_P05Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_P01() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.B_P01Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_P01' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.B_P01Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCCOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller__Tran.TCCOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TCCOUNT' in table 'Teller _Tran' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller__Tran.TCCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.SPUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPUSERNAMENull()
            Me(Me.tableTeller__Tran.SPUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASHBNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CASHBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASHBNull()
            Me(Me.tableTeller__Tran.CASHBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOCIBNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.COCIBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOCIBNull()
            Me(Me.tableTeller__Tran.COCIBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDMREQNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.ADDMREQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDMREQNull()
            Me(Me.tableTeller__Tran.ADDMREQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASHSAVNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CASHSAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASHSAVNull()
            Me(Me.tableTeller__Tran.CASHSAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASHORNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CASHORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASHORNull()
            Me(Me.tableTeller__Tran.CASHORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDCHECKSNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.ADDCHECKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDCHECKSNull()
            Me(Me.tableTeller__Tran.ADDCHECKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDLTDNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.ADDLTDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDLTDNull()
            Me(Me.tableTeller__Tran.ADDLTDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTFNAME1Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTFNAME1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTFNAME1Null()
            Me(Me.tableTeller__Tran.CTFNAME1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTFAMT1Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTFAMT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTFAMT1Null()
            Me(Me.tableTeller__Tran.CTFAMT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTFNAME2Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTFNAME2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTFNAME2Null()
            Me(Me.tableTeller__Tran.CTFNAME2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTFAMT2Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTFAMT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTFAMT2Null()
            Me(Me.tableTeller__Tran.CTFAMT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTFNAME3Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTFNAME3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTFNAME3Null()
            Me(Me.tableTeller__Tran.CTFNAME3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTFAMT3Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTFAMT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTFAMT3Null()
            Me(Me.tableTeller__Tran.CTFAMT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDCASHNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.ADDCASHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDCASHNull()
            Me(Me.tableTeller__Tran.ADDCASHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCRSAVNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CRSAVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCRSAVNull()
            Me(Me.tableTeller__Tran.CRSAVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCRORONull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CROROColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCRORONull()
            Me(Me.tableTeller__Tran.CROROColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCRACCNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CRACCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCRACCNull()
            Me(Me.tableTeller__Tran.CRACCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCRCRNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CRCRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCRCRNull()
            Me(Me.tableTeller__Tran.CRCRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADDTOTALNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.ADDTOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADDTOTALNull()
            Me(Me.tableTeller__Tran.ADDTOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIBNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.DIBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIBNull()
            Me(Me.tableTeller__Tran.DIBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.REFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFNull()
            Me(Me.tableTeller__Tran.REFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_WITHNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.WITHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_WITHNull()
            Me(Me.tableTeller__Tran.WITHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKENCNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CHKENCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKENCNull()
            Me(Me.tableTeller__Tran.CHKENCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOCINull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.COCIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOCINull()
            Me(Me.tableTeller__Tran.COCIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKDEPNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CHKDEPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKDEPNull()
            Me(Me.tableTeller__Tran.CHKDEPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMERNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.EMERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMERNull()
            Me(Me.tableTeller__Tran.EMERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTTNAME1Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTTNAME1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTTNAME1Null()
            Me(Me.tableTeller__Tran.CTTNAME1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTTAMT1Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTTAMT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTTAMT1Null()
            Me(Me.tableTeller__Tran.CTTAMT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTTNAME2Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTTNAME2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTTNAME2Null()
            Me(Me.tableTeller__Tran.CTTNAME2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTTAMT2Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTTAMT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTTAMT2Null()
            Me(Me.tableTeller__Tran.CTTAMT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTTNAME3Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTTNAME3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTTNAME3Null()
            Me(Me.tableTeller__Tran.CTTNAME3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTTAMT3Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTTAMT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTTAMT3Null()
            Me(Me.tableTeller__Tran.CTTAMT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTDISBNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.TOTDISBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTDISBNull()
            Me(Me.tableTeller__Tran.TOTDISBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCBALENDNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CBALENDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCBALENDNull()
            Me(Me.tableTeller__Tran.CBALENDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTTCENDNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.CTTCENDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTTCENDNull()
            Me(Me.tableTeller__Tran.CTTCENDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOVERNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.OVERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOVERNull()
            Me(Me.tableTeller__Tran.OVERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_1000Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_1000Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_1000Null()
            Me(Me.tableTeller__Tran.B_1000Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_500Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_500Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_500Null()
            Me(Me.tableTeller__Tran.B_500Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_200Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_200Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_200Null()
            Me(Me.tableTeller__Tran.B_200Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_100Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_100Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_100Null()
            Me(Me.tableTeller__Tran.B_100Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_50Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_50Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_50Null()
            Me(Me.tableTeller__Tran.B_50Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_20Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_20Null()
            Me(Me.tableTeller__Tran.B_20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_10Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_10Null()
            Me(Me.tableTeller__Tran.B_10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_5Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_5Null()
            Me(Me.tableTeller__Tran.B_5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_1Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_1Null()
            Me(Me.tableTeller__Tran.B_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_P50Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_P50Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_P50Null()
            Me(Me.tableTeller__Tran.B_P50Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_P25Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_P25Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_P25Null()
            Me(Me.tableTeller__Tran.B_P25Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_P10Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_P10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_P10Null()
            Me(Me.tableTeller__Tran.B_P10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_P05Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_P05Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_P05Null()
            Me(Me.tableTeller__Tran.B_P05Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_P01Null() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.B_P01Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_P01Null()
            Me(Me.tableTeller__Tran.B_P01Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableTeller__Tran.TCCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCCOUNTNull()
            Me(Me.tableTeller__Tran.TCCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Teller_BlotterRow
        Inherits Global.System.Data.DataRow
        
        Private tableTeller_Blotter As Teller_BlotterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTeller_Blotter = CType(Me.Table,Teller_BlotterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.TCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TCODE' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.TCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.CASHColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASH' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.CASHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHECK() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.CHECKColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHECK' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.CHECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WITHD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.WITHDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WITHD' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.WITHDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ELOAN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.ELOANColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ELOAN' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.ELOANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFUND() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.REFUNDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFUND' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.REFUNDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKACC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTeller_Blotter.CHKACCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKACC' in table 'Teller_Blotter' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTeller_Blotter.CHKACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAMENull()
            Me(Me.tableTeller_Blotter.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTCODENull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.TCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTCODENull()
            Me(Me.tableTeller_Blotter.TCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASHNull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.CASHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASHNull()
            Me(Me.tableTeller_Blotter.CASHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHECKNull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.CHECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHECKNull()
            Me(Me.tableTeller_Blotter.CHECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWITHDNull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.WITHDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWITHDNull()
            Me(Me.tableTeller_Blotter.WITHDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsELOANNull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.ELOANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetELOANNull()
            Me(Me.tableTeller_Blotter.ELOANColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFUNDNull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.REFUNDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFUNDNull()
            Me(Me.tableTeller_Blotter.REFUNDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKACCNull() As Boolean
            Return Me.IsNull(Me.tableTeller_Blotter.CHKACCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKACCNull()
            Me(Me.tableTeller_Blotter.CHKACCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOM_NAcctsRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOM_NAccts As EOM_NAcctsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOM_NAccts = CType(Me.Table,EOM_NAcctsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_NAccts.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOM_NAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_NAccts.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_NAccts.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOM_NAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_NAccts.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_NAccts.ACCTADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTADDR1' in table 'EOM_NAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_NAccts.ACCTADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_NAccts.ADD_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_DATE' in table 'EOM_NAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_NAccts.ADD_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTIDEP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_NAccts.ACCTIDEPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTIDEP' in table 'EOM_NAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_NAccts.ACCTIDEPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOM_NAccts.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOM_NAccts.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOM_NAccts.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOM_NAccts.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTADDR1Null() As Boolean
            Return Me.IsNull(Me.tableEOM_NAccts.ACCTADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTADDR1Null()
            Me(Me.tableEOM_NAccts.ACCTADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_DATENull() As Boolean
            Return Me.IsNull(Me.tableEOM_NAccts.ADD_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_DATENull()
            Me(Me.tableEOM_NAccts.ADD_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTIDEPNull() As Boolean
            Return Me.IsNull(Me.tableEOM_NAccts.ACCTIDEPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTIDEPNull()
            Me(Me.tableEOM_NAccts.ACCTIDEPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOM_BMinRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOM_BMin As EOM_BMinDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOM_BMin = CType(Me.Table,EOM_BMinDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BMin.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOM_BMin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BMin.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BMin.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOM_BMin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BMin.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSTAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BMin.ACCTSTATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSTAT' in table 'EOM_BMin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BMin.ACCTSTATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTOBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BMin.ACCTOBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTOBAL' in table 'EOM_BMin' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BMin.ACCTOBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOM_BMin.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOM_BMin.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOM_BMin.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOM_BMin.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSTATNull() As Boolean
            Return Me.IsNull(Me.tableEOM_BMin.ACCTSTATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSTATNull()
            Me(Me.tableEOM_BMin.ACCTSTATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTOBALNull() As Boolean
            Return Me.IsNull(Me.tableEOM_BMin.ACCTOBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTOBALNull()
            Me(Me.tableEOM_BMin.ACCTOBALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOM_AccIntRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOM_AccInt As EOM_AccIntDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOM_AccInt = CType(Me.Table,EOM_AccIntDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_AccInt.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOM_AccInt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_AccInt.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_AccInt.NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'EOM_AccInt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_AccInt.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_AccInt.ADBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADB' in table 'EOM_AccInt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_AccInt.ADBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableEOM_AccInt.MTDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTD' in table 'EOM_AccInt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_AccInt.MTDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_AccInt.QTDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTD' in table 'EOM_AccInt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_AccInt.QTDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOM_AccInt.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOM_AccInt.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOM_AccInt.NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAMENull()
            Me(Me.tableEOM_AccInt.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADBNull() As Boolean
            Return Me.IsNull(Me.tableEOM_AccInt.ADBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADBNull()
            Me(Me.tableEOM_AccInt.ADBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTDNull() As Boolean
            Return Me.IsNull(Me.tableEOM_AccInt.MTDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTDNull()
            Me(Me.tableEOM_AccInt.MTDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTDNull() As Boolean
            Return Me.IsNull(Me.tableEOM_AccInt.QTDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTDNull()
            Me(Me.tableEOM_AccInt.QTDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOM_DAcctsRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOM_DAccts As EOM_DAcctsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOM_DAccts = CType(Me.Table,EOM_DAcctsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_DAccts.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOM_DAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_DAccts.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_DAccts.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOM_DAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_DAccts.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LTRANDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_DAccts.LTRANDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LTRANDATE' in table 'EOM_DAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_DAccts.LTRANDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTOBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_DAccts.ACCTOBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTOBAL' in table 'EOM_DAccts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_DAccts.ACCTOBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOM_DAccts.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOM_DAccts.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOM_DAccts.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOM_DAccts.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLTRANDATENull() As Boolean
            Return Me.IsNull(Me.tableEOM_DAccts.LTRANDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLTRANDATENull()
            Me(Me.tableEOM_DAccts.LTRANDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTOBALNull() As Boolean
            Return Me.IsNull(Me.tableEOM_DAccts.ACCTOBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTOBALNull()
            Me(Me.tableEOM_DAccts.ACCTOBALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOM_BRunupRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOM_BRunup As EOM_BRunupDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOM_BRunup = CType(Me.Table,EOM_BRunupDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BRunup.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOM_BRunup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BRunup.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BRunup.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOM_BRunup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BRunup.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSTAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BRunup.ACCTSTATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSTAT' in table 'EOM_BRunup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BRunup.ACCTSTATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LTRANDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BRunup.LTRANDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LTRANDATE' in table 'EOM_BRunup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BRunup.LTRANDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTOBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_BRunup.ACCTOBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTOBAL' in table 'EOM_BRunup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_BRunup.ACCTOBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOM_BRunup.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOM_BRunup.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOM_BRunup.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOM_BRunup.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSTATNull() As Boolean
            Return Me.IsNull(Me.tableEOM_BRunup.ACCTSTATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSTATNull()
            Me(Me.tableEOM_BRunup.ACCTSTATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLTRANDATENull() As Boolean
            Return Me.IsNull(Me.tableEOM_BRunup.LTRANDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLTRANDATENull()
            Me(Me.tableEOM_BRunup.LTRANDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTOBALNull() As Boolean
            Return Me.IsNull(Me.tableEOM_BRunup.ACCTOBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTOBALNull()
            Me(Me.tableEOM_BRunup.ACCTOBALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOQ_IntPaidRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOQ_IntPaid As EOQ_IntPaidDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOQ_IntPaid = CType(Me.Table,EOQ_IntPaidDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOQ_IntPaid.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOQ_IntPaid' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOQ_IntPaid.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOQ_IntPaid.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOQ_IntPaid' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOQ_IntPaid.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OLDBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOQ_IntPaid.OLDBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OLDBAL' in table 'EOQ_IntPaid' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOQ_IntPaid.OLDBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOQ_IntPaid.QTDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTD' in table 'EOQ_IntPaid' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOQ_IntPaid.QTDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WTAX() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOQ_IntPaid.WTAXColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WTAX' in table 'EOQ_IntPaid' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOQ_IntPaid.WTAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTOBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOQ_IntPaid.ACCTOBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTOBAL' in table 'EOQ_IntPaid' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOQ_IntPaid.ACCTOBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOQ_IntPaid.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOQ_IntPaid.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOQ_IntPaid.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOQ_IntPaid.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOLDBALNull() As Boolean
            Return Me.IsNull(Me.tableEOQ_IntPaid.OLDBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOLDBALNull()
            Me(Me.tableEOQ_IntPaid.OLDBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTDNull() As Boolean
            Return Me.IsNull(Me.tableEOQ_IntPaid.QTDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTDNull()
            Me(Me.tableEOQ_IntPaid.QTDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWTAXNull() As Boolean
            Return Me.IsNull(Me.tableEOQ_IntPaid.WTAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWTAXNull()
            Me(Me.tableEOQ_IntPaid.WTAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTOBALNull() As Boolean
            Return Me.IsNull(Me.tableEOQ_IntPaid.ACCTOBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTOBALNull()
            Me(Me.tableEOQ_IntPaid.ACCTOBALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOD_BTotalsRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOD_BTotals As EOD_BTotalsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOD_BTotals = CType(Me.Table,EOD_BTotalsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAW() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.SAWColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAW' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.SAWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SADM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.SADMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SADM' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.SADMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.SACDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SACD' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.SACDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SAHD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.SAHDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SAHD' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.SAHDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SACM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.SACMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SACM' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.SACMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSAW() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.CSAWColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CSAW' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.CSAWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSADM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.CSADMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CSADM' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.CSADMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSACD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.CSACDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CSACD' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.CSACDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSAHD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.CSAHDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CSAHD' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.CSAHDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSACM() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.CSACMColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CSACM' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.CSACMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.LOCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOC' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.LOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.REGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REG' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.REGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OUS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.OUSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OUS' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.OUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLOC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.CLOCColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLOC' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.CLOCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.CREGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREG' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.CREGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COUS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_BTotals.COUSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUS' in table 'EOD_BTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_BTotals.COUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAWNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.SAWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAWNull()
            Me(Me.tableEOD_BTotals.SAWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSADMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.SADMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSADMNull()
            Me(Me.tableEOD_BTotals.SADMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSACDNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.SACDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSACDNull()
            Me(Me.tableEOD_BTotals.SACDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSAHDNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.SAHDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSAHDNull()
            Me(Me.tableEOD_BTotals.SAHDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSACMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.SACMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSACMNull()
            Me(Me.tableEOD_BTotals.SACMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSAWNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.CSAWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSAWNull()
            Me(Me.tableEOD_BTotals.CSAWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSADMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.CSADMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSADMNull()
            Me(Me.tableEOD_BTotals.CSADMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSACDNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.CSACDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSACDNull()
            Me(Me.tableEOD_BTotals.CSACDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSAHDNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.CSAHDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSAHDNull()
            Me(Me.tableEOD_BTotals.CSAHDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSACMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.CSACMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSACMNull()
            Me(Me.tableEOD_BTotals.CSACMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOCNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.LOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOCNull()
            Me(Me.tableEOD_BTotals.LOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREGNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.REGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREGNull()
            Me(Me.tableEOD_BTotals.REGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOUSNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.OUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOUSNull()
            Me(Me.tableEOD_BTotals.OUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLOCNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.CLOCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLOCNull()
            Me(Me.tableEOD_BTotals.CLOCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREGNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.CREGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREGNull()
            Me(Me.tableEOD_BTotals.CREGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOUSNull() As Boolean
            Return Me.IsNull(Me.tableEOD_BTotals.COUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOUSNull()
            Me(Me.tableEOD_BTotals.COUSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOD_CDepoRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOD_CDepo As EOD_CDepoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOD_CDepo = CType(Me.Table,EOD_CDepoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.CHKAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKAMT' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.CHKAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.CHKCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKCODE' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.CHKCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.TRANDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANDATE' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.TRANDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKNUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.CHKNUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKNUM' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.CHKNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKBANK() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.CHKBANKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKBANK' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.CHKBANKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.ADD_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_TIME' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.ADD_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_CDepo.USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'EOD_CDepo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_CDepo.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOD_CDepo.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOD_CDepo.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKAMTNull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.CHKAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKAMTNull()
            Me(Me.tableEOD_CDepo.CHKAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKCODENull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.CHKCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKCODENull()
            Me(Me.tableEOD_CDepo.CHKCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANDATENull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.TRANDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANDATENull()
            Me(Me.tableEOD_CDepo.TRANDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKNUMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.CHKNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKNUMNull()
            Me(Me.tableEOD_CDepo.CHKNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKBANKNull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.CHKBANKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKBANKNull()
            Me(Me.tableEOD_CDepo.CHKBANKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_TIMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.ADD_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_TIMENull()
            Me(Me.tableEOD_CDepo.ADD_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERNull() As Boolean
            Return Me.IsNull(Me.tableEOD_CDepo.USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERNull()
            Me(Me.tableEOD_CDepo.USERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOD_RItemsRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOD_RItems As EOD_RItemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOD_RItems = CType(Me.Table,EOD_RItemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_RItems.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOD_RItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_RItems.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_RItems.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOD_RItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_RItems.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKAMT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_RItems.CHKAMTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKAMT' in table 'EOD_RItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_RItems.CHKAMTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_RItems.CHKCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKCODE' in table 'EOD_RItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_RItems.CHKCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_RItems.TRANDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANDATE' in table 'EOD_RItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_RItems.TRANDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKNUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_RItems.CHKNUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKNUM' in table 'EOD_RItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_RItems.CHKNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_RItems.ADD_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_TIME' in table 'EOD_RItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_RItems.ADD_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOD_RItems.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOD_RItems.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_RItems.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOD_RItems.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKAMTNull() As Boolean
            Return Me.IsNull(Me.tableEOD_RItems.CHKAMTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKAMTNull()
            Me(Me.tableEOD_RItems.CHKAMTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKCODENull() As Boolean
            Return Me.IsNull(Me.tableEOD_RItems.CHKCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKCODENull()
            Me(Me.tableEOD_RItems.CHKCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANDATENull() As Boolean
            Return Me.IsNull(Me.tableEOD_RItems.TRANDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANDATENull()
            Me(Me.tableEOD_RItems.TRANDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKNUMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_RItems.CHKNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKNUMNull()
            Me(Me.tableEOD_RItems.CHKNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_TIMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_RItems.ADD_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_TIMENull()
            Me(Me.tableEOD_RItems.ADD_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOD_ECorrectRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOD_ECorrect As EOD_ECorrectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOD_ECorrect = CType(Me.Table,EOD_ECorrectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANDEB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.TRANDEBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANDEB' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.TRANDEBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANCRE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.TRANCREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANCRE' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.TRANCREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.TRANCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANCODE' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.TRANCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANSEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.TRANSEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSEQ' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.TRANSEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_ECorrect.ADD_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_TIME' in table 'EOD_ECorrect' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_ECorrect.ADD_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOD_ECorrect.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOD_ECorrect.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANDEBNull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.TRANDEBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANDEBNull()
            Me(Me.tableEOD_ECorrect.TRANDEBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANCRENull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.TRANCREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANCRENull()
            Me(Me.tableEOD_ECorrect.TRANCREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANCODENull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.TRANCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANCODENull()
            Me(Me.tableEOD_ECorrect.TRANCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERNull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERNull()
            Me(Me.tableEOD_ECorrect.USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANSEQNull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.TRANSEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANSEQNull()
            Me(Me.tableEOD_ECorrect.TRANSEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_TIMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_ECorrect.ADD_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_TIMENull()
            Me(Me.tableEOD_ECorrect.ADD_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOD_DCTotalsRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOD_DCTotals As EOD_DCTotalsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOD_DCTotals = CType(Me.Table,EOD_DCTotalsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTRLNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_DCTotals.CTRLNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CTRLNO' in table 'EOD_DCTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_DCTotals.CTRLNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANBBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_DCTotals.TRANBBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANBBAL' in table 'EOD_DCTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_DCTotals.TRANBBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANDEB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_DCTotals.TRANDEBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANDEB' in table 'EOD_DCTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_DCTotals.TRANDEBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANCRE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_DCTotals.TRANCREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANCRE' in table 'EOD_DCTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_DCTotals.TRANCREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANEBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_DCTotals.TRANEBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANEBAL' in table 'EOD_DCTotals' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_DCTotals.TRANEBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTRLNONull() As Boolean
            Return Me.IsNull(Me.tableEOD_DCTotals.CTRLNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTRLNONull()
            Me(Me.tableEOD_DCTotals.CTRLNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANBBALNull() As Boolean
            Return Me.IsNull(Me.tableEOD_DCTotals.TRANBBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANBBALNull()
            Me(Me.tableEOD_DCTotals.TRANBBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANDEBNull() As Boolean
            Return Me.IsNull(Me.tableEOD_DCTotals.TRANDEBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANDEBNull()
            Me(Me.tableEOD_DCTotals.TRANDEBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANCRENull() As Boolean
            Return Me.IsNull(Me.tableEOD_DCTotals.TRANCREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANCRENull()
            Me(Me.tableEOD_DCTotals.TRANCREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANEBALNull() As Boolean
            Return Me.IsNull(Me.tableEOD_DCTotals.TRANEBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANEBALNull()
            Me(Me.tableEOD_DCTotals.TRANEBALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOD_TListingRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOD_TListing As EOD_TListingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOD_TListing = CType(Me.Table,EOD_TListingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.ACCTNUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNUM' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.ACCTNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANBBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.TRANBBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANBBAL' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.TRANBBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANDEB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.TRANDEBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANDEB' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.TRANDEBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANCRE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.TRANCREColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANCRE' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.TRANCREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.TRANCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANCODE' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.TRANCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANEBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.TRANEBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANEBAL' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.TRANEBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.ADD_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_TIME' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.ADD_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKNUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.CHKNUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKNUM' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.CHKNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHKCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.CHKCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHKCODE' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.CHKCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OVERRIDE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.OVERRIDEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OVERRIDE' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.OVERRIDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_TListing.USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'EOD_TListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_TListing.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNUMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.ACCTNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNUMNull()
            Me(Me.tableEOD_TListing.ACCTNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANBBALNull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.TRANBBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANBBALNull()
            Me(Me.tableEOD_TListing.TRANBBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANDEBNull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.TRANDEBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANDEBNull()
            Me(Me.tableEOD_TListing.TRANDEBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANCRENull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.TRANCREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANCRENull()
            Me(Me.tableEOD_TListing.TRANCREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANCODENull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.TRANCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANCODENull()
            Me(Me.tableEOD_TListing.TRANCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANEBALNull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.TRANEBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANEBALNull()
            Me(Me.tableEOD_TListing.TRANEBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_TIMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.ADD_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_TIMENull()
            Me(Me.tableEOD_TListing.ADD_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKNUMNull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.CHKNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKNUMNull()
            Me(Me.tableEOD_TListing.CHKNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHKCODENull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.CHKCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHKCODENull()
            Me(Me.tableEOD_TListing.CHKCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOVERRIDENull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.OVERRIDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOVERRIDENull()
            Me(Me.tableEOD_TListing.OVERRIDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERNull() As Boolean
            Return Me.IsNull(Me.tableEOD_TListing.USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERNull()
            Me(Me.tableEOD_TListing.USERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOD_RegisterRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOD_Register As EOD_RegisterDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOD_Register = CType(Me.Table,EOD_RegisterDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_Register.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOD_Register' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_Register.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_Register.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOD_Register' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_Register.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOD_Register.AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMOUNT' in table 'EOD_Register' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_Register.AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_TIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_Register.ADD_TIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_TIME' in table 'EOD_Register' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_Register.ADD_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property user() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOD_Register.userColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER' in table 'EOD_Register' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOD_Register.userColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOD_Register.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOD_Register.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_Register.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOD_Register.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEOD_Register.AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMOUNTNull()
            Me(Me.tableEOD_Register.AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_TIMENull() As Boolean
            Return Me.IsNull(Me.tableEOD_Register.ADD_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_TIMENull()
            Me(Me.tableEOD_Register.ADD_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuserNull() As Boolean
            Return Me.IsNull(Me.tableEOD_Register.userColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuserNull()
            Me(Me.tableEOD_Register.userColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Master_ProoflistRow
        Inherits Global.System.Data.DataRow
        
        Private tableMaster_Prooflist As Master_ProoflistDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaster_Prooflist = CType(Me.Table,Master_ProoflistDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSTAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ACCTSTATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSTAT' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ACCTSTATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTADDR1() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ACCTADDR1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTADDR1' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ACCTADDR1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ACCTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNAME' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ACCTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ADD_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_DATE' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ADD_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LTRANDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.LTRANDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LTRANDATE' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.LTRANDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTOBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ACCTOBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTOBAL' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ACCTOBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTFLOATS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMaster_Prooflist.ACCTFLOATSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTFLOATS' in table 'Master_Prooflist' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaster_Prooflist.ACCTFLOATSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableMaster_Prooflist.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSTATNull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ACCTSTATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSTATNull()
            Me(Me.tableMaster_Prooflist.ACCTSTATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableMaster_Prooflist.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTADDR1Null() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ACCTADDR1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTADDR1Null()
            Me(Me.tableMaster_Prooflist.ACCTADDR1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNAMENull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ACCTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNAMENull()
            Me(Me.tableMaster_Prooflist.ACCTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_DATENull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ADD_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_DATENull()
            Me(Me.tableMaster_Prooflist.ADD_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLTRANDATENull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.LTRANDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLTRANDATENull()
            Me(Me.tableMaster_Prooflist.LTRANDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTOBALNull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ACCTOBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTOBALNull()
            Me(Me.tableMaster_Prooflist.ACCTOBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTFLOATSNull() As Boolean
            Return Me.IsNull(Me.tableMaster_Prooflist.ACCTFLOATSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTFLOATSNull()
            Me(Me.tableMaster_Prooflist.ACCTFLOATSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Activity_LogRow
        Inherits Global.System.Data.DataRow
        
        Private tableActivity_Log As Activity_LogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableActivity_Log = CType(Me.Table,Activity_LogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivity_Log.ADATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADATE' in table 'Activity_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivity_Log.ADATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivity_Log.ATIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ATIME' in table 'Activity_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivity_Log.ATIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUSER() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivity_Log.AUSERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUSER' in table 'Activity_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivity_Log.AUSERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AOVER() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivity_Log.AOVERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AOVER' in table 'Activity_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivity_Log.AOVERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AACTI() As String
            Get
                Try 
                    Return CType(Me(Me.tableActivity_Log.AACTIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AACTI' in table 'Activity_Log' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableActivity_Log.AACTIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADATENull() As Boolean
            Return Me.IsNull(Me.tableActivity_Log.ADATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADATENull()
            Me(Me.tableActivity_Log.ADATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsATIMENull() As Boolean
            Return Me.IsNull(Me.tableActivity_Log.ATIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetATIMENull()
            Me(Me.tableActivity_Log.ATIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUSERNull() As Boolean
            Return Me.IsNull(Me.tableActivity_Log.AUSERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUSERNull()
            Me(Me.tableActivity_Log.AUSERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAOVERNull() As Boolean
            Return Me.IsNull(Me.tableActivity_Log.AOVERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAOVERNull()
            Me(Me.tableActivity_Log.AOVERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAACTINull() As Boolean
            Return Me.IsNull(Me.tableActivity_Log.AACTIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAACTINull()
            Me(Me.tableActivity_Log.AACTIColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Mem_APaymentRow
        Inherits Global.System.Data.DataRow
        
        Private tableMem_APayment As Mem_APaymentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMem_APayment = CType(Me.Table,Mem_APaymentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KBCI_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.KBCI_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KBCI_NO' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.KBCI_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PN_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.PN_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PN_NO' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.PN_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOAN_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.LOAN_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOAN_TYPE' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.LOAN_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.ACCTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNAME' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.ACCTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMOUNT' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.ADD_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD_DATE' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.ADD_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMARKS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.REMARKSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMARKS' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.REMARKSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXSEQ() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.EXSEQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSEQ' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.EXSEQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTIME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.EXTIMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTIME' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.EXTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXBBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.EXBBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXBBAL' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.EXBBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXEBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMem_APayment.EXEBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXEBAL' in table 'Mem_APayment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMem_APayment.EXEBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableMem_APayment.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKBCI_NONull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.KBCI_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKBCI_NONull()
            Me(Me.tableMem_APayment.KBCI_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPN_NONull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.PN_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPN_NONull()
            Me(Me.tableMem_APayment.PN_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOAN_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.LOAN_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOAN_TYPENull()
            Me(Me.tableMem_APayment.LOAN_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNAMENull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.ACCTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNAMENull()
            Me(Me.tableMem_APayment.ACCTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMOUNTNull()
            Me(Me.tableMem_APayment.AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD_DATENull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.ADD_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD_DATENull()
            Me(Me.tableMem_APayment.ADD_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.REMARKSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMARKSNull()
            Me(Me.tableMem_APayment.REMARKSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSNull()
            Me(Me.tableMem_APayment.STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXSEQNull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.EXSEQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXSEQNull()
            Me(Me.tableMem_APayment.EXSEQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTIMENull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.EXTIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTIMENull()
            Me(Me.tableMem_APayment.EXTIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXBBALNull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.EXBBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXBBALNull()
            Me(Me.tableMem_APayment.EXBBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXEBALNull() As Boolean
            Return Me.IsNull(Me.tableMem_APayment.EXEBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXEBALNull()
            Me(Me.tableMem_APayment.EXEBALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EOM_DormancyRow
        Inherits Global.System.Data.DataRow
        
        Private tableEOM_Dormancy As EOM_DormancyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEOM_Dormancy = CType(Me.Table,EOM_DormancyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_Dormancy.ACCTNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTNO' in table 'EOM_Dormancy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_Dormancy.ACCTNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEOM_Dormancy.ACCTSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTSNAME' in table 'EOM_Dormancy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_Dormancy.ACCTSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCTEBAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_Dormancy.ACCTEBALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCTEBAL' in table 'EOM_Dormancy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_Dormancy.ACCTEBALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DORMANCYFEE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEOM_Dormancy.DORMANCYFEEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DORMANCYFEE' in table 'EOM_Dormancy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEOM_Dormancy.DORMANCYFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTNONull() As Boolean
            Return Me.IsNull(Me.tableEOM_Dormancy.ACCTNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTNONull()
            Me(Me.tableEOM_Dormancy.ACCTNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableEOM_Dormancy.ACCTSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTSNAMENull()
            Me(Me.tableEOM_Dormancy.ACCTSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCTEBALNull() As Boolean
            Return Me.IsNull(Me.tableEOM_Dormancy.ACCTEBALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCTEBALNull()
            Me(Me.tableEOM_Dormancy.ACCTEBALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDORMANCYFEENull() As Boolean
            Return Me.IsNull(Me.tableEOM_Dormancy.DORMANCYFEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDORMANCYFEENull()
            Me(Me.tableEOM_Dormancy.DORMANCYFEEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Mem_LedgerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Mem_LedgerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Mem_LedgerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Mem_LedgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Mem_PayrollRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Mem_PayrollRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Mem_PayrollRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Mem_PayrollRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Mem_LoanholdRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Mem_LoanholdRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Mem_LoanholdRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Mem_LoanholdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Teller__TranRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Teller__TranRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Teller__TranRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Teller__TranRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Teller_BlotterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Teller_BlotterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Teller_BlotterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Teller_BlotterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOM_NAcctsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOM_NAcctsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOM_NAcctsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOM_NAcctsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOM_BMinRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOM_BMinRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOM_BMinRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOM_BMinRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOM_AccIntRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOM_AccIntRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOM_AccIntRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOM_AccIntRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOM_DAcctsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOM_DAcctsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOM_DAcctsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOM_DAcctsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOM_BRunupRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOM_BRunupRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOM_BRunupRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOM_BRunupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOQ_IntPaidRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOQ_IntPaidRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOQ_IntPaidRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOQ_IntPaidRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOD_BTotalsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOD_BTotalsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOD_BTotalsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOD_BTotalsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOD_CDepoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOD_CDepoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOD_CDepoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOD_CDepoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOD_RItemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOD_RItemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOD_RItemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOD_RItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOD_ECorrectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOD_ECorrectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOD_ECorrectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOD_ECorrectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOD_DCTotalsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOD_DCTotalsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOD_DCTotalsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOD_DCTotalsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOD_TListingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOD_TListingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOD_TListingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOD_TListingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOD_RegisterRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOD_RegisterRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOD_RegisterRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOD_RegisterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Master_ProoflistRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Master_ProoflistRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Master_ProoflistRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Master_ProoflistRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Activity_LogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Activity_LogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Activity_LogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Activity_LogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Mem_APaymentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Mem_APaymentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Mem_APaymentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Mem_APaymentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EOM_DormancyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EOM_DormancyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EOM_DormancyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EOM_DormancyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
